// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: practice_sessions.sql

package db

import (
	"context"
	"database/sql"
)

const createPracticeSession = `-- name: CreatePracticeSession :exec
INSERT INTO practice_sessions (
    id,
    duration_minutes,
    date,
    user_id
) VALUES (?, ?, ?, ?)
RETURNING id, duration_minutes, date, user_id
`

type CreatePracticeSessionParams struct {
	ID              string
	DurationMinutes int64
	Date            int64
	UserID          string
}

func (q *Queries) CreatePracticeSession(ctx context.Context, arg CreatePracticeSessionParams) error {
	_, err := q.db.ExecContext(ctx, createPracticeSession,
		arg.ID,
		arg.DurationMinutes,
		arg.Date,
		arg.UserID,
	)
	return err
}

const getPracticeSession = `-- name: GetPracticeSession :one
SELECT practice_sessions.id, practice_sessions.duration_minutes, practice_sessions.date, practice_sessions.user_id,
    practice_piece.measures AS practice_piece_measures,
    pieces.title AS piece_title,
    pieces.id AS piece_id,
    pieces.composer AS piece_composer,
    spots.name AS spot_name,
    spots.id AS spot_id,
    spots.measures AS spot_measures,
    spots.piece_id AS spot_piece_id,
    (SELECT pieces.title FROM pieces WHERE pieces.id = spots.piece_id) AS spot_piece_title
FROM practice_sessions
LEFT JOIN practice_piece ON practice_sessions.id = practice_piece.practice_session_id
LEFT JOIN pieces ON practice_piece.piece_id = pieces.id
LEFT JOIN practice_spot ON practice_sessions.id = practice_spot.practice_session_id
LEFT JOIN spots ON practice_spot.spot_id = spots.id
WHERE practice_sessions.id = ?1 AND practice_sessions.user_id = ?2
`

type GetPracticeSessionParams struct {
	PracticeSessionID string
	UserID            string
}

type GetPracticeSessionRow struct {
	ID                    string
	DurationMinutes       int64
	Date                  int64
	UserID                string
	PracticePieceMeasures sql.NullString
	PieceTitle            sql.NullString
	PieceID               sql.NullString
	PieceComposer         sql.NullString
	SpotName              sql.NullString
	SpotID                sql.NullString
	SpotMeasures          sql.NullString
	SpotPieceID           sql.NullString
	SpotPieceTitle        sql.NullString
}

func (q *Queries) GetPracticeSession(ctx context.Context, arg GetPracticeSessionParams) (GetPracticeSessionRow, error) {
	row := q.db.QueryRowContext(ctx, getPracticeSession, arg.PracticeSessionID, arg.UserID)
	var i GetPracticeSessionRow
	err := row.Scan(
		&i.ID,
		&i.DurationMinutes,
		&i.Date,
		&i.UserID,
		&i.PracticePieceMeasures,
		&i.PieceTitle,
		&i.PieceID,
		&i.PieceComposer,
		&i.SpotName,
		&i.SpotID,
		&i.SpotMeasures,
		&i.SpotPieceID,
		&i.SpotPieceTitle,
	)
	return i, err
}

const practicePiece = `-- name: PracticePiece :exec
INSERT INTO practice_piece (
    piece_id,
    practice_session_id,
    measures
) VALUES (
    (SELECT pieces.id FROM pieces WHERE pieces.user_id = ? AND pieces.id = ? LIMIT 1),
    ?, ?
)
`

type PracticePieceParams struct {
	UserID            string
	PieceID           string
	PracticeSessionID string
	Measures          string
}

func (q *Queries) PracticePiece(ctx context.Context, arg PracticePieceParams) error {
	_, err := q.db.ExecContext(ctx, practicePiece,
		arg.UserID,
		arg.PieceID,
		arg.PracticeSessionID,
		arg.Measures,
	)
	return err
}

const practiceSpot = `-- name: PracticeSpot :exec
INSERT INTO practice_spot (
    spot_id,
    practice_session_id
) VALUES (
    (SELECT spots.id FROM spots WHERE spots.piece_id = (SELECT pieces.id FROM pieces WHERE pieces.user_id = ? AND pieces.id = ? LIMIT 1) AND spots.id = ?),
    ?
)
`

type PracticeSpotParams struct {
	UserID            string
	PieceID           string
	SpotID            string
	PracticeSessionID string
}

func (q *Queries) PracticeSpot(ctx context.Context, arg PracticeSpotParams) error {
	_, err := q.db.ExecContext(ctx, practiceSpot,
		arg.UserID,
		arg.PieceID,
		arg.SpotID,
		arg.PracticeSessionID,
	)
	return err
}
