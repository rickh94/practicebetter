// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const countUserCredentials = `-- name: CountUserCredentials :one
SELECT COUNT(*) FROM credentials WHERE user_id = ?
`

func (q *Queries) CountUserCredentials(ctx context.Context, userID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUserCredentials, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createCredential = `-- name: CreateCredential :one
INSERT INTO credentials (
    credential_id,
    public_key,
    transport,
    attestation_type,
    flags,
    authenticator,
    user_id
) VALUES (?, ?, ?, ?, ?, ?, ?)
RETURNING credential_id, public_key, transport, attestation_type, flags, authenticator, user_id
`

type CreateCredentialParams struct {
	CredentialID    []byte
	PublicKey       []byte
	Transport       []byte
	AttestationType string
	Flags           []byte
	Authenticator   []byte
	UserID          string
}

func (q *Queries) CreateCredential(ctx context.Context, arg CreateCredentialParams) (Credential, error) {
	row := q.db.QueryRowContext(ctx, createCredential,
		arg.CredentialID,
		arg.PublicKey,
		arg.Transport,
		arg.AttestationType,
		arg.Flags,
		arg.Authenticator,
		arg.UserID,
	)
	var i Credential
	err := row.Scan(
		&i.CredentialID,
		&i.PublicKey,
		&i.Transport,
		&i.AttestationType,
		&i.Flags,
		&i.Authenticator,
		&i.UserID,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, fullname, email) VALUES (?, ?, ?)
RETURNING id, fullname, email, email_verified
`

type CreateUserParams struct {
	ID       string
	Fullname string
	Email    string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.ID, arg.Fullname, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.Email,
		&i.EmailVerified,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const deleteUserCredentials = `-- name: DeleteUserCredentials :exec
DELETE FROM credentials WHERE user_id = ?
`

func (q *Queries) DeleteUserCredentials(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, deleteUserCredentials, userID)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, fullname, email, email_verified
FROM users
WHERE email = LOWER(?1)
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.Email,
		&i.EmailVerified,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, fullname, email, email_verified
FROM users
WHERE id = ?
`

func (q *Queries) GetUserByID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.Email,
		&i.EmailVerified,
	)
	return i, err
}

const getUserCredentials = `-- name: GetUserCredentials :many
SELECT credential_id, public_key, transport, attestation_type, flags, authenticator, user_id
FROM credentials
WHERE user_id = ?
`

func (q *Queries) GetUserCredentials(ctx context.Context, userID string) ([]Credential, error) {
	rows, err := q.db.QueryContext(ctx, getUserCredentials, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Credential
	for rows.Next() {
		var i Credential
		if err := rows.Scan(
			&i.CredentialID,
			&i.PublicKey,
			&i.Transport,
			&i.AttestationType,
			&i.Flags,
			&i.Authenticator,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserForLogin = `-- name: GetUserForLogin :one
SELECT
    users.id,
    users.fullname,
    users.email,
    users.email_verified,
    COUNT(credentials.credential_id) AS credential_count
FROM users
LEFT JOIN credentials ON users.id = credentials.user_id
WHERE users.email = LOWER(?1)
`

type GetUserForLoginRow struct {
	ID              string
	Fullname        string
	Email           string
	EmailVerified   sql.NullBool
	CredentialCount int64
}

func (q *Queries) GetUserForLogin(ctx context.Context, email string) (GetUserForLoginRow, error) {
	row := q.db.QueryRowContext(ctx, getUserForLogin, email)
	var i GetUserForLoginRow
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.Email,
		&i.EmailVerified,
		&i.CredentialCount,
	)
	return i, err
}

const setEmailVerified = `-- name: SetEmailVerified :exec
UPDATE users SET email_verified = 1 WHERE id = ?
RETURNING id, fullname, email, email_verified
`

func (q *Queries) SetEmailVerified(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, setEmailVerified, id)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET fullname = COALESCE(?, fullname),
    email = COALESCE(?, email),
    email_verified = COALESCE(?, email_verified)
WHERE id = ?
RETURNING id, fullname, email, email_verified
`

type UpdateUserParams struct {
	Fullname      string
	Email         string
	EmailVerified sql.NullBool
	ID            string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Fullname,
		arg.Email,
		arg.EmailVerified,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.Email,
		&i.EmailVerified,
	)
	return i, err
}
