// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: practice_plans.sql

package db

import (
	"context"
	"database/sql"
	"strings"
)

const completePracticePlan = `-- name: CompletePracticePlan :exec
UPDATE practice_plans
SET completed = true,
    practice_notes = ?
WHERE id = ? AND user_id = ?
`

type CompletePracticePlanParams struct {
	PracticeNotes sql.NullString `json:"practiceNotes"`
	ID            string         `json:"id"`
	UserID        string         `json:"userId"`
}

func (q *Queries) CompletePracticePlan(ctx context.Context, arg CompletePracticePlanParams) error {
	_, err := q.db.ExecContext(ctx, completePracticePlan, arg.PracticeNotes, arg.ID, arg.UserID)
	return err
}

const completePracticePlanPiece = `-- name: CompletePracticePlanPiece :exec
UPDATE practice_plan_pieces
SET completed = true
WHERE practice_plan_id = (SELECT practice_plans.id FROM practice_plans WHERE practice_plans.id = ? AND practice_plans.user_id = ?) AND piece_id = ? AND practice_type = ?
`

type CompletePracticePlanPieceParams struct {
	PlanID       string `json:"planId"`
	UserID       string `json:"userId"`
	PieceID      string `json:"pieceId"`
	PracticeType string `json:"practiceType"`
}

func (q *Queries) CompletePracticePlanPiece(ctx context.Context, arg CompletePracticePlanPieceParams) error {
	_, err := q.db.ExecContext(ctx, completePracticePlanPiece,
		arg.PlanID,
		arg.UserID,
		arg.PieceID,
		arg.PracticeType,
	)
	return err
}

const completePracticePlanReading = `-- name: CompletePracticePlanReading :exec
UPDATE practice_plan_reading
SET completed = true
WHERE practice_plan_id = (SELECT practice_plans.id FROM practice_plans WHERE practice_plans.id = ? AND practice_plans.user_id = ?) AND reading_id = ?
`

type CompletePracticePlanReadingParams struct {
	PlanID    string `json:"planId"`
	UserID    string `json:"userId"`
	ReadingID string `json:"readingId"`
}

func (q *Queries) CompletePracticePlanReading(ctx context.Context, arg CompletePracticePlanReadingParams) error {
	_, err := q.db.ExecContext(ctx, completePracticePlanReading, arg.PlanID, arg.UserID, arg.ReadingID)
	return err
}

const completePracticePlanScale = `-- name: CompletePracticePlanScale :exec
UPDATE practice_plan_scales
SET completed = true
WHERE practice_plan_id = (SELECT practice_plans.id FROM practice_plans WHERE practice_plans.id = ? AND practice_plans.user_id = ?) AND user_scale_id = ?
`

type CompletePracticePlanScaleParams struct {
	PlanID      string `json:"planId"`
	UserID      string `json:"userId"`
	UserScaleID string `json:"userScaleId"`
}

func (q *Queries) CompletePracticePlanScale(ctx context.Context, arg CompletePracticePlanScaleParams) error {
	_, err := q.db.ExecContext(ctx, completePracticePlanScale, arg.PlanID, arg.UserID, arg.UserScaleID)
	return err
}

const completePracticePlanSpot = `-- name: CompletePracticePlanSpot :exec
UPDATE practice_plan_spots
SET completed = true,
    evaluation = NULL
WHERE practice_plan_id = (SELECT practice_plans.id FROM practice_plans WHERE practice_plans.id = ? AND practice_plans.user_id = ?) AND spot_id = ?
`

type CompletePracticePlanSpotParams struct {
	PlanID string `json:"planId"`
	UserID string `json:"userId"`
	SpotID string `json:"spotId"`
}

func (q *Queries) CompletePracticePlanSpot(ctx context.Context, arg CompletePracticePlanSpotParams) error {
	_, err := q.db.ExecContext(ctx, completePracticePlanSpot, arg.PlanID, arg.UserID, arg.SpotID)
	return err
}

const countUserPracticePlans = `-- name: CountUserPracticePlans :one
SELECT COUNT(*) FROM practice_plans WHERE user_id = ?
`

func (q *Queries) CountUserPracticePlans(ctx context.Context, userID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUserPracticePlans, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPracticePlan = `-- name: CreatePracticePlan :one
INSERT INTO practice_plans (
    id,
    user_id,
    intensity,
    date
) VALUES (?, ?, ?, unixepoch('now'))
RETURNING id, user_id, intensity, date, completed, practice_notes, last_practiced
`

type CreatePracticePlanParams struct {
	ID        string `json:"id"`
	UserID    string `json:"userId"`
	Intensity string `json:"intensity"`
}

func (q *Queries) CreatePracticePlan(ctx context.Context, arg CreatePracticePlanParams) (PracticePlan, error) {
	row := q.db.QueryRowContext(ctx, createPracticePlan, arg.ID, arg.UserID, arg.Intensity)
	var i PracticePlan
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Intensity,
		&i.Date,
		&i.Completed,
		&i.PracticeNotes,
		&i.LastPracticed,
	)
	return i, err
}

const createPracticePlanPiece = `-- name: CreatePracticePlanPiece :one
INSERT INTO practice_plan_pieces (
    practice_plan_id,
    piece_id,
    practice_type
) VALUES (?, ?, ?)
RETURNING practice_plan_id, piece_id, practice_type, completed, sessions, idx
`

type CreatePracticePlanPieceParams struct {
	PracticePlanID string `json:"practicePlanId"`
	PieceID        string `json:"pieceId"`
	PracticeType   string `json:"practiceType"`
}

func (q *Queries) CreatePracticePlanPiece(ctx context.Context, arg CreatePracticePlanPieceParams) (PracticePlanPiece, error) {
	row := q.db.QueryRowContext(ctx, createPracticePlanPiece, arg.PracticePlanID, arg.PieceID, arg.PracticeType)
	var i PracticePlanPiece
	err := row.Scan(
		&i.PracticePlanID,
		&i.PieceID,
		&i.PracticeType,
		&i.Completed,
		&i.Sessions,
		&i.Idx,
	)
	return i, err
}

const createPracticePlanPieceWithIdx = `-- name: CreatePracticePlanPieceWithIdx :one
INSERT INTO practice_plan_pieces (
    practice_plan_id,
    piece_id,
    practice_type,
    idx
) VALUES (?, ?, ?, ?)
RETURNING practice_plan_id, piece_id, practice_type, completed, sessions, idx
`

type CreatePracticePlanPieceWithIdxParams struct {
	PracticePlanID string `json:"practicePlanId"`
	PieceID        string `json:"pieceId"`
	PracticeType   string `json:"practiceType"`
	Idx            int64  `json:"idx"`
}

func (q *Queries) CreatePracticePlanPieceWithIdx(ctx context.Context, arg CreatePracticePlanPieceWithIdxParams) (PracticePlanPiece, error) {
	row := q.db.QueryRowContext(ctx, createPracticePlanPieceWithIdx,
		arg.PracticePlanID,
		arg.PieceID,
		arg.PracticeType,
		arg.Idx,
	)
	var i PracticePlanPiece
	err := row.Scan(
		&i.PracticePlanID,
		&i.PieceID,
		&i.PracticeType,
		&i.Completed,
		&i.Sessions,
		&i.Idx,
	)
	return i, err
}

const createPracticePlanReadingWithIdx = `-- name: CreatePracticePlanReadingWithIdx :one
INSERT INTO practice_plan_reading (
    practice_plan_id,
    reading_id,
    idx
) VALUES (?, ?, ?)
RETURNING practice_plan_id, reading_id, completed, idx
`

type CreatePracticePlanReadingWithIdxParams struct {
	PracticePlanID string `json:"practicePlanId"`
	ReadingID      string `json:"readingId"`
	Idx            int64  `json:"idx"`
}

func (q *Queries) CreatePracticePlanReadingWithIdx(ctx context.Context, arg CreatePracticePlanReadingWithIdxParams) (PracticePlanReading, error) {
	row := q.db.QueryRowContext(ctx, createPracticePlanReadingWithIdx, arg.PracticePlanID, arg.ReadingID, arg.Idx)
	var i PracticePlanReading
	err := row.Scan(
		&i.PracticePlanID,
		&i.ReadingID,
		&i.Completed,
		&i.Idx,
	)
	return i, err
}

const createPracticePlanScaleWithIdx = `-- name: CreatePracticePlanScaleWithIdx :one
INSERT INTO practice_plan_scales (
    practice_plan_id,
    user_scale_id,
    idx
) VALUES (?, ?, ?)
RETURNING practice_plan_id, user_scale_id, completed, idx
`

type CreatePracticePlanScaleWithIdxParams struct {
	PracticePlanID string `json:"practicePlanId"`
	UserScaleID    string `json:"userScaleId"`
	Idx            int64  `json:"idx"`
}

func (q *Queries) CreatePracticePlanScaleWithIdx(ctx context.Context, arg CreatePracticePlanScaleWithIdxParams) (PracticePlanScale, error) {
	row := q.db.QueryRowContext(ctx, createPracticePlanScaleWithIdx, arg.PracticePlanID, arg.UserScaleID, arg.Idx)
	var i PracticePlanScale
	err := row.Scan(
		&i.PracticePlanID,
		&i.UserScaleID,
		&i.Completed,
		&i.Idx,
	)
	return i, err
}

const createPracticePlanSpot = `-- name: CreatePracticePlanSpot :one
INSERT INTO practice_plan_spots (
    practice_plan_id,
    spot_id,
    practice_type
) VALUES (?, ?, ?)
RETURNING practice_plan_id, spot_id, practice_type, evaluation, completed, idx
`

type CreatePracticePlanSpotParams struct {
	PracticePlanID string `json:"practicePlanId"`
	SpotID         string `json:"spotId"`
	PracticeType   string `json:"practiceType"`
}

func (q *Queries) CreatePracticePlanSpot(ctx context.Context, arg CreatePracticePlanSpotParams) (PracticePlanSpot, error) {
	row := q.db.QueryRowContext(ctx, createPracticePlanSpot, arg.PracticePlanID, arg.SpotID, arg.PracticeType)
	var i PracticePlanSpot
	err := row.Scan(
		&i.PracticePlanID,
		&i.SpotID,
		&i.PracticeType,
		&i.Evaluation,
		&i.Completed,
		&i.Idx,
	)
	return i, err
}

const createPracticePlanSpotWithIdx = `-- name: CreatePracticePlanSpotWithIdx :one
INSERT INTO practice_plan_spots (
    practice_plan_id,
    spot_id,
    practice_type,
    idx
) VALUES (?, ?, ?, ?)
RETURNING practice_plan_id, spot_id, practice_type, evaluation, completed, idx
`

type CreatePracticePlanSpotWithIdxParams struct {
	PracticePlanID string `json:"practicePlanId"`
	SpotID         string `json:"spotId"`
	PracticeType   string `json:"practiceType"`
	Idx            int64  `json:"idx"`
}

func (q *Queries) CreatePracticePlanSpotWithIdx(ctx context.Context, arg CreatePracticePlanSpotWithIdxParams) (PracticePlanSpot, error) {
	row := q.db.QueryRowContext(ctx, createPracticePlanSpotWithIdx,
		arg.PracticePlanID,
		arg.SpotID,
		arg.PracticeType,
		arg.Idx,
	)
	var i PracticePlanSpot
	err := row.Scan(
		&i.PracticePlanID,
		&i.SpotID,
		&i.PracticeType,
		&i.Evaluation,
		&i.Completed,
		&i.Idx,
	)
	return i, err
}

const deletePracticePlan = `-- name: DeletePracticePlan :exec
DELETE FROM practice_plans
WHERE id = ? AND user_id = ?
`

type DeletePracticePlanParams struct {
	ID     string `json:"id"`
	UserID string `json:"userId"`
}

func (q *Queries) DeletePracticePlan(ctx context.Context, arg DeletePracticePlanParams) error {
	_, err := q.db.ExecContext(ctx, deletePracticePlan, arg.ID, arg.UserID)
	return err
}

const deletePracticePlanPiece = `-- name: DeletePracticePlanPiece :exec
DELETE FROM practice_plan_pieces
WHERE practice_plan_id = (SELECT practice_plans.id FROM practice_plans WHERE practice_plans.id = ?1 AND practice_plans.user_id = ?2)
AND piece_id = ?3
AND practice_type = ?4
`

type DeletePracticePlanPieceParams struct {
	PlanID       string `json:"planId"`
	UserID       string `json:"userId"`
	PieceID      string `json:"pieceId"`
	PracticeType string `json:"practiceType"`
}

func (q *Queries) DeletePracticePlanPiece(ctx context.Context, arg DeletePracticePlanPieceParams) error {
	_, err := q.db.ExecContext(ctx, deletePracticePlanPiece,
		arg.PlanID,
		arg.UserID,
		arg.PieceID,
		arg.PracticeType,
	)
	return err
}

const deletePracticePlanScale = `-- name: DeletePracticePlanScale :one
DELETE FROM practice_plan_scales
WHERE practice_plan_id = (SELECT practice_plans.id FROM practice_plans WHERE practice_plans.id = ?1 AND practice_plans.user_id = ?2)
AND user_scale_id = ?3
RETURNING practice_plan_id, user_scale_id, completed, idx
`

type DeletePracticePlanScaleParams struct {
	PlanID      string `json:"planId"`
	UserID      string `json:"userId"`
	UserScaleID string `json:"userScaleId"`
}

func (q *Queries) DeletePracticePlanScale(ctx context.Context, arg DeletePracticePlanScaleParams) (PracticePlanScale, error) {
	row := q.db.QueryRowContext(ctx, deletePracticePlanScale, arg.PlanID, arg.UserID, arg.UserScaleID)
	var i PracticePlanScale
	err := row.Scan(
		&i.PracticePlanID,
		&i.UserScaleID,
		&i.Completed,
		&i.Idx,
	)
	return i, err
}

const deletePracticePlanSpot = `-- name: DeletePracticePlanSpot :exec
DELETE FROM practice_plan_spots
WHERE practice_plan_id = (SELECT practice_plans.id FROM practice_plans WHERE practice_plans.id = ?1 AND practice_plans.user_id = ?2)
AND spot_id = ?3
AND practice_type = ?4
`

type DeletePracticePlanSpotParams struct {
	PlanID       string `json:"planId"`
	UserID       string `json:"userId"`
	SpotID       string `json:"spotId"`
	PracticeType string `json:"practiceType"`
}

func (q *Queries) DeletePracticePlanSpot(ctx context.Context, arg DeletePracticePlanSpotParams) error {
	_, err := q.db.ExecContext(ctx, deletePracticePlanSpot,
		arg.PlanID,
		arg.UserID,
		arg.SpotID,
		arg.PracticeType,
	)
	return err
}

const getLatestPracticePlan = `-- name: GetLatestPracticePlan :one
SELECT id, user_id, intensity, date, completed, practice_notes, last_practiced
FROM practice_plans
WHERE user_id = ?
ORDER BY date DESC
LIMIT 1
`

func (q *Queries) GetLatestPracticePlan(ctx context.Context, userID string) (PracticePlan, error) {
	row := q.db.QueryRowContext(ctx, getLatestPracticePlan, userID)
	var i PracticePlan
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Intensity,
		&i.Date,
		&i.Completed,
		&i.PracticeNotes,
		&i.LastPracticed,
	)
	return i, err
}

const getMaxPieceIdx = `-- name: GetMaxPieceIdx :one
SELECT MAX(idx) FROM practice_plan_pieces
WHERE practice_plan_id = (SELECT practice_plans.id FROM practice_plans WHERE practice_plans.id = ?1 AND practice_plans.user_id = ?2)
`

type GetMaxPieceIdxParams struct {
	PlanID string `json:"planId"`
	UserID string `json:"userId"`
}

func (q *Queries) GetMaxPieceIdx(ctx context.Context, arg GetMaxPieceIdxParams) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getMaxPieceIdx, arg.PlanID, arg.UserID)
	var max interface{}
	err := row.Scan(&max)
	return max, err
}

const getMaxScaleIdx = `-- name: GetMaxScaleIdx :one
SELECT MAX(idx) FROM practice_plan_scales
WHERE practice_plan_id = (SELECT practice_plans.id FROM practice_plans WHERE practice_plans.id = ?1 AND practice_plans.user_id = ?2)
`

type GetMaxScaleIdxParams struct {
	PlanID string `json:"planId"`
	UserID string `json:"userId"`
}

func (q *Queries) GetMaxScaleIdx(ctx context.Context, arg GetMaxScaleIdxParams) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getMaxScaleIdx, arg.PlanID, arg.UserID)
	var max interface{}
	err := row.Scan(&max)
	return max, err
}

const getMaxSpotIdx = `-- name: GetMaxSpotIdx :one
SELECT MAX(idx) FROM practice_plan_spots
WHERE practice_plan_id = (SELECT practice_plans.id FROM practice_plans WHERE practice_plans.id = ?1 AND practice_plans.user_id = ?2)
`

type GetMaxSpotIdxParams struct {
	PlanID string `json:"planId"`
	UserID string `json:"userId"`
}

func (q *Queries) GetMaxSpotIdx(ctx context.Context, arg GetMaxSpotIdxParams) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getMaxSpotIdx, arg.PlanID, arg.UserID)
	var max interface{}
	err := row.Scan(&max)
	return max, err
}

const getNextInfrequentSpot = `-- name: GetNextInfrequentSpot :one
SELECT spots.id, spots.piece_id, spots.name, spots.stage, spots.measures, spots.audio_prompt_url, spots.image_prompt_url, spots.notes_prompt, spots.text_prompt, spots.current_tempo, spots.last_practiced, spots.stage_started, spots.skip_days, spots.priority, spots.section_id,
    (SELECT pieces.title FROM pieces WHERE pieces.id = spots.piece_id LIMIT 1) AS piece_title
FROM practice_plan_spots
INNER JOIN spots ON practice_plan_spots.spot_id = spots.id
WHERE practice_plan_spots.practice_type = 'interleave_days'
    AND practice_plan_spots.practice_plan_id = (SELECT practice_plans.id FROM practice_plans WHERE practice_plans.id = ?1 AND practice_plans.user_id = ?2)
    AND practice_plan_spots.completed = false
ORDER BY practice_plan_spots.idx
LIMIT 1
`

type GetNextInfrequentSpotParams struct {
	PlanID string `json:"planId"`
	UserID string `json:"userId"`
}

type GetNextInfrequentSpotRow struct {
	ID             string         `json:"id"`
	PieceID        string         `json:"pieceId"`
	Name           string         `json:"name"`
	Stage          string         `json:"stage"`
	Measures       sql.NullString `json:"measures"`
	AudioPromptUrl string         `json:"audioPromptUrl"`
	ImagePromptUrl string         `json:"imagePromptUrl"`
	NotesPrompt    string         `json:"notesPrompt"`
	TextPrompt     string         `json:"textPrompt"`
	CurrentTempo   sql.NullInt64  `json:"currentTempo"`
	LastPracticed  sql.NullInt64  `json:"lastPracticed"`
	StageStarted   sql.NullInt64  `json:"stageStarted"`
	SkipDays       int64          `json:"skipDays"`
	Priority       int64          `json:"priority"`
	SectionID      sql.NullString `json:"sectionId"`
	PieceTitle     string         `json:"pieceTitle"`
}

func (q *Queries) GetNextInfrequentSpot(ctx context.Context, arg GetNextInfrequentSpotParams) (GetNextInfrequentSpotRow, error) {
	row := q.db.QueryRowContext(ctx, getNextInfrequentSpot, arg.PlanID, arg.UserID)
	var i GetNextInfrequentSpotRow
	err := row.Scan(
		&i.ID,
		&i.PieceID,
		&i.Name,
		&i.Stage,
		&i.Measures,
		&i.AudioPromptUrl,
		&i.ImagePromptUrl,
		&i.NotesPrompt,
		&i.TextPrompt,
		&i.CurrentTempo,
		&i.LastPracticed,
		&i.StageStarted,
		&i.SkipDays,
		&i.Priority,
		&i.SectionID,
		&i.PieceTitle,
	)
	return i, err
}

const getPlanLastPracticed = `-- name: GetPlanLastPracticed :one
SELECT last_practiced
FROM practice_plans
WHERE id = ? AND user_id = ?
`

type GetPlanLastPracticedParams struct {
	ID     string `json:"id"`
	UserID string `json:"userId"`
}

func (q *Queries) GetPlanLastPracticed(ctx context.Context, arg GetPlanLastPracticedParams) (sql.NullInt64, error) {
	row := q.db.QueryRowContext(ctx, getPlanLastPracticed, arg.ID, arg.UserID)
	var last_practiced sql.NullInt64
	err := row.Scan(&last_practiced)
	return last_practiced, err
}

const getPracticePlan = `-- name: GetPracticePlan :one
SELECT id, user_id, intensity, date, completed, practice_notes, last_practiced
FROM practice_plans
WHERE id = ? AND user_id = ?
`

type GetPracticePlanParams struct {
	ID     string `json:"id"`
	UserID string `json:"userId"`
}

func (q *Queries) GetPracticePlan(ctx context.Context, arg GetPracticePlanParams) (PracticePlan, error) {
	row := q.db.QueryRowContext(ctx, getPracticePlan, arg.ID, arg.UserID)
	var i PracticePlan
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Intensity,
		&i.Date,
		&i.Completed,
		&i.PracticeNotes,
		&i.LastPracticed,
	)
	return i, err
}

const getPracticePlanEvaluatedInterleaveSpots = `-- name: GetPracticePlanEvaluatedInterleaveSpots :many
SELECT practice_plan_spots.practice_plan_id, practice_plan_spots.spot_id, practice_plan_spots.practice_type, practice_plan_spots.evaluation, practice_plan_spots.completed, practice_plan_spots.idx,
    spots.stage_started AS spot_stage_started
FROM practice_plan_spots
INNER JOIN spots ON practice_plan_spots.spot_id = spots.id
WHERE practice_plan_spots.practice_type = 'interleave'
AND practice_plan_spots.evaluation IS NOT NULL
AND practice_plan_spots.completed = false
AND practice_plan_spots.practice_plan_id = (SELECT practice_plans.id FROM practice_plans WHERE practice_plans.id = ?1 AND practice_plans.user_id = ?2)
ORDER BY practice_plan_spots.idx
`

type GetPracticePlanEvaluatedInterleaveSpotsParams struct {
	PlanID string `json:"planId"`
	UserID string `json:"userId"`
}

type GetPracticePlanEvaluatedInterleaveSpotsRow struct {
	PracticePlanID   string         `json:"practicePlanId"`
	SpotID           string         `json:"spotId"`
	PracticeType     string         `json:"practiceType"`
	Evaluation       sql.NullString `json:"evaluation"`
	Completed        bool           `json:"completed"`
	Idx              int64          `json:"idx"`
	SpotStageStarted sql.NullInt64  `json:"spotStageStarted"`
}

func (q *Queries) GetPracticePlanEvaluatedInterleaveSpots(ctx context.Context, arg GetPracticePlanEvaluatedInterleaveSpotsParams) ([]GetPracticePlanEvaluatedInterleaveSpotsRow, error) {
	rows, err := q.db.QueryContext(ctx, getPracticePlanEvaluatedInterleaveSpots, arg.PlanID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPracticePlanEvaluatedInterleaveSpotsRow
	for rows.Next() {
		var i GetPracticePlanEvaluatedInterleaveSpotsRow
		if err := rows.Scan(
			&i.PracticePlanID,
			&i.SpotID,
			&i.PracticeType,
			&i.Evaluation,
			&i.Completed,
			&i.Idx,
			&i.SpotStageStarted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPracticePlanFailedNewSpots = `-- name: GetPracticePlanFailedNewSpots :many
SELECT practice_plan_spots.practice_plan_id, practice_plan_spots.spot_id, practice_plan_spots.practice_type, practice_plan_spots.evaluation, practice_plan_spots.completed, practice_plan_spots.idx
FROM practice_plan_spots
INNER JOIN spots ON practice_plan_spots.spot_id = spots.id
WHERE practice_plan_spots.practice_type = 'new'
AND practice_plan_spots.practice_plan_id = (SELECT practice_plans.id FROM practice_plans WHERE practice_plans.user_id = ?1 ORDER BY date DESC LIMIT 1)
AND spots.stage = 'repeat'
AND spots.piece_id IN (/*SLICE:pieceIDs*/?)
ORDER BY practice_plan_spots.idx
`

type GetPracticePlanFailedNewSpotsParams struct {
	UserID   string   `json:"userId"`
	PieceIDs []string `json:"pieceIDs"`
}

func (q *Queries) GetPracticePlanFailedNewSpots(ctx context.Context, arg GetPracticePlanFailedNewSpotsParams) ([]PracticePlanSpot, error) {
	query := getPracticePlanFailedNewSpots
	var queryParams []interface{}
	queryParams = append(queryParams, arg.UserID)
	if len(arg.PieceIDs) > 0 {
		for _, v := range arg.PieceIDs {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:pieceIDs*/?", strings.Repeat(",?", len(arg.PieceIDs))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:pieceIDs*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PracticePlanSpot
	for rows.Next() {
		var i PracticePlanSpot
		if err := rows.Scan(
			&i.PracticePlanID,
			&i.SpotID,
			&i.PracticeType,
			&i.Evaluation,
			&i.Completed,
			&i.Idx,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPracticePlanIncompleteExtraRepeatSpots = `-- name: GetPracticePlanIncompleteExtraRepeatSpots :many
SELECT practice_plan_spots.practice_plan_id, practice_plan_spots.spot_id, practice_plan_spots.practice_type, practice_plan_spots.evaluation, practice_plan_spots.completed, practice_plan_spots.idx,
    spots.piece_id AS spot_piece_id
FROM practice_plan_spots
INNER JOIN spots ON practice_plan_spots.spot_id = spots.id
WHERE practice_plan_spots.practice_type = 'extra_repeat'
AND practice_plan_spots.completed = false
AND practice_plan_spots.practice_plan_id = (SELECT practice_plans.id FROM practice_plans WHERE practice_plans.id = ?1 AND practice_plans.user_id = ?2)
ORDER BY practice_plan_spots.idx
`

type GetPracticePlanIncompleteExtraRepeatSpotsParams struct {
	PlanID string `json:"planId"`
	UserID string `json:"userId"`
}

type GetPracticePlanIncompleteExtraRepeatSpotsRow struct {
	PracticePlanID string         `json:"practicePlanId"`
	SpotID         string         `json:"spotId"`
	PracticeType   string         `json:"practiceType"`
	Evaluation     sql.NullString `json:"evaluation"`
	Completed      bool           `json:"completed"`
	Idx            int64          `json:"idx"`
	SpotPieceID    string         `json:"spotPieceId"`
}

func (q *Queries) GetPracticePlanIncompleteExtraRepeatSpots(ctx context.Context, arg GetPracticePlanIncompleteExtraRepeatSpotsParams) ([]GetPracticePlanIncompleteExtraRepeatSpotsRow, error) {
	rows, err := q.db.QueryContext(ctx, getPracticePlanIncompleteExtraRepeatSpots, arg.PlanID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPracticePlanIncompleteExtraRepeatSpotsRow
	for rows.Next() {
		var i GetPracticePlanIncompleteExtraRepeatSpotsRow
		if err := rows.Scan(
			&i.PracticePlanID,
			&i.SpotID,
			&i.PracticeType,
			&i.Evaluation,
			&i.Completed,
			&i.Idx,
			&i.SpotPieceID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPracticePlanIncompleteNewSpots = `-- name: GetPracticePlanIncompleteNewSpots :many
SELECT practice_plan_spots.practice_plan_id, practice_plan_spots.spot_id, practice_plan_spots.practice_type, practice_plan_spots.evaluation, practice_plan_spots.completed, practice_plan_spots.idx,
    spots.piece_id AS spot_piece_id
FROM practice_plan_spots
INNER JOIN spots ON practice_plan_spots.spot_id = spots.id
WHERE practice_plan_spots.practice_type = 'new'
AND practice_plan_spots.completed = false
AND practice_plan_spots.practice_plan_id = (SELECT practice_plans.id FROM practice_plans WHERE practice_plans.id = ?1 AND practice_plans.user_id = ?2)
ORDER BY practice_plan_spots.idx
`

type GetPracticePlanIncompleteNewSpotsParams struct {
	PlanID string `json:"planId"`
	UserID string `json:"userId"`
}

type GetPracticePlanIncompleteNewSpotsRow struct {
	PracticePlanID string         `json:"practicePlanId"`
	SpotID         string         `json:"spotId"`
	PracticeType   string         `json:"practiceType"`
	Evaluation     sql.NullString `json:"evaluation"`
	Completed      bool           `json:"completed"`
	Idx            int64          `json:"idx"`
	SpotPieceID    string         `json:"spotPieceId"`
}

func (q *Queries) GetPracticePlanIncompleteNewSpots(ctx context.Context, arg GetPracticePlanIncompleteNewSpotsParams) ([]GetPracticePlanIncompleteNewSpotsRow, error) {
	rows, err := q.db.QueryContext(ctx, getPracticePlanIncompleteNewSpots, arg.PlanID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPracticePlanIncompleteNewSpotsRow
	for rows.Next() {
		var i GetPracticePlanIncompleteNewSpotsRow
		if err := rows.Scan(
			&i.PracticePlanID,
			&i.SpotID,
			&i.PracticeType,
			&i.Evaluation,
			&i.Completed,
			&i.Idx,
			&i.SpotPieceID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPracticePlanIncompleteRandomPieces = `-- name: GetPracticePlanIncompleteRandomPieces :many
SELECT practice_plan_id, piece_id, practice_type, completed, sessions, idx
FROM practice_plan_pieces
WHERE practice_plan_pieces.practice_type = 'random_spots'
AND practice_plan_pieces.completed = false
AND practice_plan_pieces.practice_plan_id = (SELECT practice_plans.id FROM practice_plans WHERE practice_plans.id = ?1 AND practice_plans.user_id = ?2)
ORDER BY practice_plan_pieces.idx
`

type GetPracticePlanIncompleteRandomPiecesParams struct {
	PlanID string `json:"planId"`
	UserID string `json:"userId"`
}

func (q *Queries) GetPracticePlanIncompleteRandomPieces(ctx context.Context, arg GetPracticePlanIncompleteRandomPiecesParams) ([]PracticePlanPiece, error) {
	rows, err := q.db.QueryContext(ctx, getPracticePlanIncompleteRandomPieces, arg.PlanID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PracticePlanPiece
	for rows.Next() {
		var i PracticePlanPiece
		if err := rows.Scan(
			&i.PracticePlanID,
			&i.PieceID,
			&i.PracticeType,
			&i.Completed,
			&i.Sessions,
			&i.Idx,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPracticePlanIncompleteStartingPointPieces = `-- name: GetPracticePlanIncompleteStartingPointPieces :many
SELECT practice_plan_id, piece_id, practice_type, completed, sessions, idx
FROM practice_plan_pieces
WHERE practice_plan_pieces.practice_type = 'starting_point'
AND practice_plan_pieces.completed = false
AND practice_plan_pieces.practice_plan_id = (SELECT practice_plans.id FROM practice_plans WHERE practice_plans.id = ?1 AND practice_plans.user_id = ?2)
ORDER BY practice_plan_pieces.idx
`

type GetPracticePlanIncompleteStartingPointPiecesParams struct {
	PlanID string `json:"planId"`
	UserID string `json:"userId"`
}

func (q *Queries) GetPracticePlanIncompleteStartingPointPieces(ctx context.Context, arg GetPracticePlanIncompleteStartingPointPiecesParams) ([]PracticePlanPiece, error) {
	rows, err := q.db.QueryContext(ctx, getPracticePlanIncompleteStartingPointPieces, arg.PlanID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PracticePlanPiece
	for rows.Next() {
		var i PracticePlanPiece
		if err := rows.Scan(
			&i.PracticePlanID,
			&i.PieceID,
			&i.PracticeType,
			&i.Completed,
			&i.Sessions,
			&i.Idx,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPracticePlanInfrequentSpot = `-- name: GetPracticePlanInfrequentSpot :one
SELECT practice_plan_spots.practice_plan_id, practice_plan_spots.spot_id, practice_plan_spots.practice_type, practice_plan_spots.evaluation, practice_plan_spots.completed, practice_plan_spots.idx,
    spots.name AS spot_name,
    spots.measures AS spot_measures,
    spots.piece_id AS spot_piece_id,
    spots.stage AS spot_stage,
    spots.stage_started AS spot_stage_started,
    (SELECT pieces.title FROM pieces WHERE pieces.id = spots.piece_id LIMIT 1) AS spot_piece_title
FROM practice_plan_spots
LEFT JOIN spots ON practice_plan_spots.spot_id = spots.id
WHERE practice_plan_spots.practice_type = 'interleave_days' AND practice_plan_spots.practice_plan_id = (SELECT practice_plans.id FROM practice_plans WHERE practice_plans.id = ?1 AND practice_plans.user_id = ?2) AND spots.id = ?3
ORDER BY practice_plan_spots.idx
`

type GetPracticePlanInfrequentSpotParams struct {
	PlanID string `json:"planId"`
	UserID string `json:"userId"`
	SpotID string `json:"spotId"`
}

type GetPracticePlanInfrequentSpotRow struct {
	PracticePlanID   string         `json:"practicePlanId"`
	SpotID           string         `json:"spotId"`
	PracticeType     string         `json:"practiceType"`
	Evaluation       sql.NullString `json:"evaluation"`
	Completed        bool           `json:"completed"`
	Idx              int64          `json:"idx"`
	SpotName         sql.NullString `json:"spotName"`
	SpotMeasures     sql.NullString `json:"spotMeasures"`
	SpotPieceID      sql.NullString `json:"spotPieceId"`
	SpotStage        sql.NullString `json:"spotStage"`
	SpotStageStarted sql.NullInt64  `json:"spotStageStarted"`
	SpotPieceTitle   string         `json:"spotPieceTitle"`
}

func (q *Queries) GetPracticePlanInfrequentSpot(ctx context.Context, arg GetPracticePlanInfrequentSpotParams) (GetPracticePlanInfrequentSpotRow, error) {
	row := q.db.QueryRowContext(ctx, getPracticePlanInfrequentSpot, arg.PlanID, arg.UserID, arg.SpotID)
	var i GetPracticePlanInfrequentSpotRow
	err := row.Scan(
		&i.PracticePlanID,
		&i.SpotID,
		&i.PracticeType,
		&i.Evaluation,
		&i.Completed,
		&i.Idx,
		&i.SpotName,
		&i.SpotMeasures,
		&i.SpotPieceID,
		&i.SpotStage,
		&i.SpotStageStarted,
		&i.SpotPieceTitle,
	)
	return i, err
}

const getPracticePlanInterleaveDaysSpots = `-- name: GetPracticePlanInterleaveDaysSpots :many
SELECT practice_plan_spots.practice_plan_id, practice_plan_spots.spot_id, practice_plan_spots.practice_type, practice_plan_spots.evaluation, practice_plan_spots.completed, practice_plan_spots.idx,
    spots.name AS spot_name,
    spots.measures AS spot_measures,
    spots.piece_id AS spot_piece_id,
    spots.stage AS spot_stage,
    spots.stage_started AS spot_stage_started,
    spots.skip_days AS spot_skip_days,
    (SELECT pieces.title FROM pieces WHERE pieces.id = spots.piece_id LIMIT 1) AS spot_piece_title
FROM practice_plan_spots
LEFT JOIN spots ON practice_plan_spots.spot_id = spots.id
WHERE practice_plan_spots.practice_type = 'interleave_days' AND practice_plan_spots.practice_plan_id = (SELECT practice_plans.id FROM practice_plans WHERE practice_plans.id = ?1 AND practice_plans.user_id = ?2)
ORDER BY practice_plan_spots.idx
`

type GetPracticePlanInterleaveDaysSpotsParams struct {
	PlanID string `json:"planId"`
	UserID string `json:"userId"`
}

type GetPracticePlanInterleaveDaysSpotsRow struct {
	PracticePlanID   string         `json:"practicePlanId"`
	SpotID           string         `json:"spotId"`
	PracticeType     string         `json:"practiceType"`
	Evaluation       sql.NullString `json:"evaluation"`
	Completed        bool           `json:"completed"`
	Idx              int64          `json:"idx"`
	SpotName         sql.NullString `json:"spotName"`
	SpotMeasures     sql.NullString `json:"spotMeasures"`
	SpotPieceID      sql.NullString `json:"spotPieceId"`
	SpotStage        sql.NullString `json:"spotStage"`
	SpotStageStarted sql.NullInt64  `json:"spotStageStarted"`
	SpotSkipDays     sql.NullInt64  `json:"spotSkipDays"`
	SpotPieceTitle   string         `json:"spotPieceTitle"`
}

func (q *Queries) GetPracticePlanInterleaveDaysSpots(ctx context.Context, arg GetPracticePlanInterleaveDaysSpotsParams) ([]GetPracticePlanInterleaveDaysSpotsRow, error) {
	rows, err := q.db.QueryContext(ctx, getPracticePlanInterleaveDaysSpots, arg.PlanID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPracticePlanInterleaveDaysSpotsRow
	for rows.Next() {
		var i GetPracticePlanInterleaveDaysSpotsRow
		if err := rows.Scan(
			&i.PracticePlanID,
			&i.SpotID,
			&i.PracticeType,
			&i.Evaluation,
			&i.Completed,
			&i.Idx,
			&i.SpotName,
			&i.SpotMeasures,
			&i.SpotPieceID,
			&i.SpotStage,
			&i.SpotStageStarted,
			&i.SpotSkipDays,
			&i.SpotPieceTitle,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPracticePlanInterleaveSpot = `-- name: GetPracticePlanInterleaveSpot :one
SELECT practice_plan_spots.practice_plan_id, practice_plan_spots.spot_id, practice_plan_spots.practice_type, practice_plan_spots.evaluation, practice_plan_spots.completed, practice_plan_spots.idx,
    spots.name AS spot_name,
    spots.measures AS spot_measures,
    spots.piece_id AS spot_piece_id,
    spots.stage AS spot_stage,
    spots.stage_started AS spot_stage_started,
    (SELECT pieces.title FROM pieces WHERE pieces.id = spots.piece_id LIMIT 1) AS spot_piece_title
FROM practice_plan_spots
LEFT JOIN spots ON practice_plan_spots.spot_id = spots.id
WHERE practice_plan_spots.practice_type = 'interleave' AND practice_plan_spots.practice_plan_id = (SELECT practice_plans.id FROM practice_plans WHERE practice_plans.id = ?1 AND practice_plans.user_id = ?2) AND spots.id = ?3
ORDER BY practice_plan_spots.idx
`

type GetPracticePlanInterleaveSpotParams struct {
	PlanID string `json:"planId"`
	UserID string `json:"userId"`
	SpotID string `json:"spotId"`
}

type GetPracticePlanInterleaveSpotRow struct {
	PracticePlanID   string         `json:"practicePlanId"`
	SpotID           string         `json:"spotId"`
	PracticeType     string         `json:"practiceType"`
	Evaluation       sql.NullString `json:"evaluation"`
	Completed        bool           `json:"completed"`
	Idx              int64          `json:"idx"`
	SpotName         sql.NullString `json:"spotName"`
	SpotMeasures     sql.NullString `json:"spotMeasures"`
	SpotPieceID      sql.NullString `json:"spotPieceId"`
	SpotStage        sql.NullString `json:"spotStage"`
	SpotStageStarted sql.NullInt64  `json:"spotStageStarted"`
	SpotPieceTitle   string         `json:"spotPieceTitle"`
}

func (q *Queries) GetPracticePlanInterleaveSpot(ctx context.Context, arg GetPracticePlanInterleaveSpotParams) (GetPracticePlanInterleaveSpotRow, error) {
	row := q.db.QueryRowContext(ctx, getPracticePlanInterleaveSpot, arg.PlanID, arg.UserID, arg.SpotID)
	var i GetPracticePlanInterleaveSpotRow
	err := row.Scan(
		&i.PracticePlanID,
		&i.SpotID,
		&i.PracticeType,
		&i.Evaluation,
		&i.Completed,
		&i.Idx,
		&i.SpotName,
		&i.SpotMeasures,
		&i.SpotPieceID,
		&i.SpotStage,
		&i.SpotStageStarted,
		&i.SpotPieceTitle,
	)
	return i, err
}

const getPracticePlanInterleaveSpots = `-- name: GetPracticePlanInterleaveSpots :many
SELECT practice_plan_spots.practice_plan_id, practice_plan_spots.spot_id, practice_plan_spots.practice_type, practice_plan_spots.evaluation, practice_plan_spots.completed, practice_plan_spots.idx,
    spots.name AS spot_name,
    spots.measures AS spot_measures,
    spots.piece_id AS spot_piece_id,
    spots.stage AS spot_stage,
    spots.stage_started AS spot_stage_started,
    (SELECT pieces.title FROM pieces WHERE pieces.id = spots.piece_id LIMIT 1) AS spot_piece_title
FROM practice_plan_spots
LEFT JOIN spots ON practice_plan_spots.spot_id = spots.id
WHERE practice_plan_spots.practice_type = 'interleave' AND practice_plan_spots.practice_plan_id = (SELECT practice_plans.id FROM practice_plans WHERE practice_plans.id = ?1 AND practice_plans.user_id = ?2)
ORDER BY practice_plan_spots.idx
`

type GetPracticePlanInterleaveSpotsParams struct {
	PlanID string `json:"planId"`
	UserID string `json:"userId"`
}

type GetPracticePlanInterleaveSpotsRow struct {
	PracticePlanID   string         `json:"practicePlanId"`
	SpotID           string         `json:"spotId"`
	PracticeType     string         `json:"practiceType"`
	Evaluation       sql.NullString `json:"evaluation"`
	Completed        bool           `json:"completed"`
	Idx              int64          `json:"idx"`
	SpotName         sql.NullString `json:"spotName"`
	SpotMeasures     sql.NullString `json:"spotMeasures"`
	SpotPieceID      sql.NullString `json:"spotPieceId"`
	SpotStage        sql.NullString `json:"spotStage"`
	SpotStageStarted sql.NullInt64  `json:"spotStageStarted"`
	SpotPieceTitle   string         `json:"spotPieceTitle"`
}

func (q *Queries) GetPracticePlanInterleaveSpots(ctx context.Context, arg GetPracticePlanInterleaveSpotsParams) ([]GetPracticePlanInterleaveSpotsRow, error) {
	rows, err := q.db.QueryContext(ctx, getPracticePlanInterleaveSpots, arg.PlanID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPracticePlanInterleaveSpotsRow
	for rows.Next() {
		var i GetPracticePlanInterleaveSpotsRow
		if err := rows.Scan(
			&i.PracticePlanID,
			&i.SpotID,
			&i.PracticeType,
			&i.Evaluation,
			&i.Completed,
			&i.Idx,
			&i.SpotName,
			&i.SpotMeasures,
			&i.SpotPieceID,
			&i.SpotStage,
			&i.SpotStageStarted,
			&i.SpotPieceTitle,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPracticePlanWithIncompleteReading = `-- name: GetPracticePlanWithIncompleteReading :many
SELECT
    practice_plans.id, practice_plans.user_id, practice_plans.intensity, practice_plans.date, practice_plans.completed, practice_plans.practice_notes, practice_plans.last_practiced,
    practice_plan_reading.completed AS completed,
    reading.id AS reading_id,
    reading.title AS reading_title,
    reading.composer AS reading_composer,
    reading.info AS reading_info,
    reading.completed AS reading_completed
FROM practice_plans
INNER JOIN practice_plan_reading ON practice_plans.id = practice_plan_reading.practice_plan_id
INNER JOIN reading ON practice_plan_reading.reading_id = reading.id
WHERE practice_plans.id = ?1 AND practice_plans.user_id = ?2 AND reading.user_id = ?2 AND reading.completed = false AND practice_plan_reading.completed = false
ORDER BY practice_plan_reading.idx
`

type GetPracticePlanWithIncompleteReadingParams struct {
	PracticePlanID string `json:"practicePlanId"`
	UserID         string `json:"userId"`
}

type GetPracticePlanWithIncompleteReadingRow struct {
	ID               string         `json:"id"`
	UserID           string         `json:"userId"`
	Intensity        string         `json:"intensity"`
	Date             int64          `json:"date"`
	Completed        bool           `json:"completed"`
	PracticeNotes    sql.NullString `json:"practiceNotes"`
	LastPracticed    sql.NullInt64  `json:"lastPracticed"`
	Completed_2      bool           `json:"completed2"`
	ReadingID        string         `json:"readingId"`
	ReadingTitle     string         `json:"readingTitle"`
	ReadingComposer  sql.NullString `json:"readingComposer"`
	ReadingInfo      sql.NullString `json:"readingInfo"`
	ReadingCompleted bool           `json:"readingCompleted"`
}

func (q *Queries) GetPracticePlanWithIncompleteReading(ctx context.Context, arg GetPracticePlanWithIncompleteReadingParams) ([]GetPracticePlanWithIncompleteReadingRow, error) {
	rows, err := q.db.QueryContext(ctx, getPracticePlanWithIncompleteReading, arg.PracticePlanID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPracticePlanWithIncompleteReadingRow
	for rows.Next() {
		var i GetPracticePlanWithIncompleteReadingRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Intensity,
			&i.Date,
			&i.Completed,
			&i.PracticeNotes,
			&i.LastPracticed,
			&i.Completed_2,
			&i.ReadingID,
			&i.ReadingTitle,
			&i.ReadingComposer,
			&i.ReadingInfo,
			&i.ReadingCompleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPracticePlanWithIncompleteScales = `-- name: GetPracticePlanWithIncompleteScales :many
SELECT
    practice_plans.id, practice_plans.user_id, practice_plans.intensity, practice_plans.date, practice_plans.completed, practice_plans.practice_notes, practice_plans.last_practiced,
    practice_plan_scales.completed AS scale_completed,
    user_scales.id AS user_scale_id,
    user_scales.practice_notes AS scale_practice_notes,
    user_scales.last_practiced AS scale_last_practiced,
    user_scales.reference AS scale_reference,
    user_scales.working AS scale_working,
    scale_keys.name AS scale_key_name,
    scale_modes.name AS scale_mode
FROM practice_plans
INNER JOIN practice_plan_scales ON practice_plans.id = practice_plan_scales.practice_plan_id
INNER JOIN user_scales ON practice_plan_scales.user_scale_id = user_scales.id
INNER JOIN scales ON user_scales.scale_id = scales.id
INNER JOIN scale_keys ON scale_keys.id = scales.key_id
INNER JOIN scale_modes ON scale_modes.id = scales.mode_id
WHERE practice_plans.id = ?1 AND practice_plans.user_id = ?2 AND user_scales.user_id = ?2 AND practice_plan_scales.completed = false
ORDER BY practice_plan_scales.idx
`

type GetPracticePlanWithIncompleteScalesParams struct {
	PracticePlanID string `json:"practicePlanId"`
	UserID         string `json:"userId"`
}

type GetPracticePlanWithIncompleteScalesRow struct {
	ID                 string         `json:"id"`
	UserID             string         `json:"userId"`
	Intensity          string         `json:"intensity"`
	Date               int64          `json:"date"`
	Completed          bool           `json:"completed"`
	PracticeNotes      sql.NullString `json:"practiceNotes"`
	LastPracticed      sql.NullInt64  `json:"lastPracticed"`
	ScaleCompleted     bool           `json:"scaleCompleted"`
	UserScaleID        string         `json:"userScaleId"`
	ScalePracticeNotes string         `json:"scalePracticeNotes"`
	ScaleLastPracticed sql.NullInt64  `json:"scaleLastPracticed"`
	ScaleReference     string         `json:"scaleReference"`
	ScaleWorking       bool           `json:"scaleWorking"`
	ScaleKeyName       string         `json:"scaleKeyName"`
	ScaleMode          string         `json:"scaleMode"`
}

func (q *Queries) GetPracticePlanWithIncompleteScales(ctx context.Context, arg GetPracticePlanWithIncompleteScalesParams) ([]GetPracticePlanWithIncompleteScalesRow, error) {
	rows, err := q.db.QueryContext(ctx, getPracticePlanWithIncompleteScales, arg.PracticePlanID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPracticePlanWithIncompleteScalesRow
	for rows.Next() {
		var i GetPracticePlanWithIncompleteScalesRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Intensity,
			&i.Date,
			&i.Completed,
			&i.PracticeNotes,
			&i.LastPracticed,
			&i.ScaleCompleted,
			&i.UserScaleID,
			&i.ScalePracticeNotes,
			&i.ScaleLastPracticed,
			&i.ScaleReference,
			&i.ScaleWorking,
			&i.ScaleKeyName,
			&i.ScaleMode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPracticePlanWithPieces = `-- name: GetPracticePlanWithPieces :many
SELECT
    practice_plans.id, practice_plans.user_id, practice_plans.intensity, practice_plans.date, practice_plans.completed, practice_plans.practice_notes, practice_plans.last_practiced,
    practice_plan_pieces.practice_type as piece_practice_type,
    practice_plan_pieces.completed AS piece_completed,
    pieces.title AS piece_title,
    pieces.id AS piece_id,
    pieces.composer AS piece_composer,
    (SELECT COUNT(id) FROM spots WHERE spots.piece_id = pieces.id AND spots.stage != 'completed') AS piece_active_spots,
    (SELECT COUNT(id) FROM spots WHERE spots.piece_id = pieces.id AND spots.stage == 'random') AS piece_random_spots,
    (SELECT COUNT(id) FROM spots WHERE spots.piece_id = pieces.id AND spots.stage == 'completed') AS piece_completed_spots
FROM practice_plans
INNER JOIN practice_plan_pieces ON practice_plans.id = practice_plan_pieces.practice_plan_id
LEFT JOIN pieces ON practice_plan_pieces.piece_id = pieces.id
WHERE practice_plans.id = ? AND practice_plans.user_id = ?
ORDER BY practice_plan_pieces.idx
`

type GetPracticePlanWithPiecesParams struct {
	ID     string `json:"id"`
	UserID string `json:"userId"`
}

type GetPracticePlanWithPiecesRow struct {
	ID                  string         `json:"id"`
	UserID              string         `json:"userId"`
	Intensity           string         `json:"intensity"`
	Date                int64          `json:"date"`
	Completed           bool           `json:"completed"`
	PracticeNotes       sql.NullString `json:"practiceNotes"`
	LastPracticed       sql.NullInt64  `json:"lastPracticed"`
	PiecePracticeType   string         `json:"piecePracticeType"`
	PieceCompleted      bool           `json:"pieceCompleted"`
	PieceTitle          sql.NullString `json:"pieceTitle"`
	PieceID             sql.NullString `json:"pieceId"`
	PieceComposer       sql.NullString `json:"pieceComposer"`
	PieceActiveSpots    int64          `json:"pieceActiveSpots"`
	PieceRandomSpots    int64          `json:"pieceRandomSpots"`
	PieceCompletedSpots int64          `json:"pieceCompletedSpots"`
}

func (q *Queries) GetPracticePlanWithPieces(ctx context.Context, arg GetPracticePlanWithPiecesParams) ([]GetPracticePlanWithPiecesRow, error) {
	rows, err := q.db.QueryContext(ctx, getPracticePlanWithPieces, arg.ID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPracticePlanWithPiecesRow
	for rows.Next() {
		var i GetPracticePlanWithPiecesRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Intensity,
			&i.Date,
			&i.Completed,
			&i.PracticeNotes,
			&i.LastPracticed,
			&i.PiecePracticeType,
			&i.PieceCompleted,
			&i.PieceTitle,
			&i.PieceID,
			&i.PieceComposer,
			&i.PieceActiveSpots,
			&i.PieceRandomSpots,
			&i.PieceCompletedSpots,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPracticePlanWithReading = `-- name: GetPracticePlanWithReading :many
SELECT
    practice_plans.id, practice_plans.user_id, practice_plans.intensity, practice_plans.date, practice_plans.completed, practice_plans.practice_notes, practice_plans.last_practiced,
    practice_plan_reading.completed AS completed,
    reading.id AS reading_id,
    reading.title AS reading_title,
    reading.composer AS reading_composer,
    reading.info AS reading_info,
    reading.completed AS reading_completed
FROM practice_plans
INNER JOIN practice_plan_reading ON practice_plans.id = practice_plan_reading.practice_plan_id
INNER JOIN reading ON practice_plan_reading.reading_id = reading.id
WHERE practice_plans.id = ?1 AND practice_plans.user_id = ?2 AND reading.user_id = ?2
ORDER BY practice_plan_reading.idx
`

type GetPracticePlanWithReadingParams struct {
	PracticePlanID string `json:"practicePlanId"`
	UserID         string `json:"userId"`
}

type GetPracticePlanWithReadingRow struct {
	ID               string         `json:"id"`
	UserID           string         `json:"userId"`
	Intensity        string         `json:"intensity"`
	Date             int64          `json:"date"`
	Completed        bool           `json:"completed"`
	PracticeNotes    sql.NullString `json:"practiceNotes"`
	LastPracticed    sql.NullInt64  `json:"lastPracticed"`
	Completed_2      bool           `json:"completed2"`
	ReadingID        string         `json:"readingId"`
	ReadingTitle     string         `json:"readingTitle"`
	ReadingComposer  sql.NullString `json:"readingComposer"`
	ReadingInfo      sql.NullString `json:"readingInfo"`
	ReadingCompleted bool           `json:"readingCompleted"`
}

func (q *Queries) GetPracticePlanWithReading(ctx context.Context, arg GetPracticePlanWithReadingParams) ([]GetPracticePlanWithReadingRow, error) {
	rows, err := q.db.QueryContext(ctx, getPracticePlanWithReading, arg.PracticePlanID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPracticePlanWithReadingRow
	for rows.Next() {
		var i GetPracticePlanWithReadingRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Intensity,
			&i.Date,
			&i.Completed,
			&i.PracticeNotes,
			&i.LastPracticed,
			&i.Completed_2,
			&i.ReadingID,
			&i.ReadingTitle,
			&i.ReadingComposer,
			&i.ReadingInfo,
			&i.ReadingCompleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPracticePlanWithScales = `-- name: GetPracticePlanWithScales :many
SELECT
    practice_plans.id, practice_plans.user_id, practice_plans.intensity, practice_plans.date, practice_plans.completed, practice_plans.practice_notes, practice_plans.last_practiced,
    practice_plan_scales.completed AS scale_completed,
    user_scales.id AS user_scale_id,
    user_scales.practice_notes AS scale_practice_notes,
    user_scales.last_practiced AS scale_last_practiced,
    user_scales.reference AS scale_reference,
    user_scales.working AS scale_working,
    scale_keys.name AS scale_key_name,
    scale_modes.name AS scale_mode
FROM practice_plans
INNER JOIN practice_plan_scales ON practice_plans.id = practice_plan_scales.practice_plan_id
INNER JOIN user_scales ON practice_plan_scales.user_scale_id = user_scales.id
INNER JOIN scales ON user_scales.scale_id = scales.id
INNER JOIN scale_keys ON scale_keys.id = scales.key_id
INNER JOIN scale_modes ON scale_modes.id = scales.mode_id
WHERE practice_plans.id = ?1 AND practice_plans.user_id = ?2 AND user_scales.user_id = ?2
ORDER BY practice_plan_scales.idx
`

type GetPracticePlanWithScalesParams struct {
	PracticePlanID string `json:"practicePlanId"`
	UserID         string `json:"userId"`
}

type GetPracticePlanWithScalesRow struct {
	ID                 string         `json:"id"`
	UserID             string         `json:"userId"`
	Intensity          string         `json:"intensity"`
	Date               int64          `json:"date"`
	Completed          bool           `json:"completed"`
	PracticeNotes      sql.NullString `json:"practiceNotes"`
	LastPracticed      sql.NullInt64  `json:"lastPracticed"`
	ScaleCompleted     bool           `json:"scaleCompleted"`
	UserScaleID        string         `json:"userScaleId"`
	ScalePracticeNotes string         `json:"scalePracticeNotes"`
	ScaleLastPracticed sql.NullInt64  `json:"scaleLastPracticed"`
	ScaleReference     string         `json:"scaleReference"`
	ScaleWorking       bool           `json:"scaleWorking"`
	ScaleKeyName       string         `json:"scaleKeyName"`
	ScaleMode          string         `json:"scaleMode"`
}

func (q *Queries) GetPracticePlanWithScales(ctx context.Context, arg GetPracticePlanWithScalesParams) ([]GetPracticePlanWithScalesRow, error) {
	rows, err := q.db.QueryContext(ctx, getPracticePlanWithScales, arg.PracticePlanID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPracticePlanWithScalesRow
	for rows.Next() {
		var i GetPracticePlanWithScalesRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Intensity,
			&i.Date,
			&i.Completed,
			&i.PracticeNotes,
			&i.LastPracticed,
			&i.ScaleCompleted,
			&i.UserScaleID,
			&i.ScalePracticeNotes,
			&i.ScaleLastPracticed,
			&i.ScaleReference,
			&i.ScaleWorking,
			&i.ScaleKeyName,
			&i.ScaleMode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPracticePlanWithSpots = `-- name: GetPracticePlanWithSpots :many
SELECT
    practice_plans.id, practice_plans.user_id, practice_plans.intensity, practice_plans.date, practice_plans.completed, practice_plans.practice_notes, practice_plans.last_practiced,
    practice_plan_spots.practice_type as spot_practice_type,
    practice_plan_spots.completed as spot_completed,
    spots.name AS spot_name,
    spots.id AS spot_id,
    spots.measures AS spot_measures,
    spots.piece_id AS spot_piece_id,
    spots.stage AS spot_stage,
    spots.skip_days AS spot_skip_days,
    spots.stage_started AS spot_stage_started,
    (SELECT pieces.title FROM pieces WHERE pieces.id = spots.piece_id LIMIT 1) AS spot_piece_title
FROM practice_plans
INNER JOIN practice_plan_spots ON practice_plans.id = practice_plan_spots.practice_plan_id
LEFT JOIN spots ON practice_plan_spots.spot_id = spots.id
WHERE practice_plans.id = ? AND practice_plans.user_id = ?
ORDER BY practice_plan_spots.idx
`

type GetPracticePlanWithSpotsParams struct {
	ID     string `json:"id"`
	UserID string `json:"userId"`
}

type GetPracticePlanWithSpotsRow struct {
	ID               string         `json:"id"`
	UserID           string         `json:"userId"`
	Intensity        string         `json:"intensity"`
	Date             int64          `json:"date"`
	Completed        bool           `json:"completed"`
	PracticeNotes    sql.NullString `json:"practiceNotes"`
	LastPracticed    sql.NullInt64  `json:"lastPracticed"`
	SpotPracticeType string         `json:"spotPracticeType"`
	SpotCompleted    bool           `json:"spotCompleted"`
	SpotName         sql.NullString `json:"spotName"`
	SpotID           sql.NullString `json:"spotId"`
	SpotMeasures     sql.NullString `json:"spotMeasures"`
	SpotPieceID      sql.NullString `json:"spotPieceId"`
	SpotStage        sql.NullString `json:"spotStage"`
	SpotSkipDays     sql.NullInt64  `json:"spotSkipDays"`
	SpotStageStarted sql.NullInt64  `json:"spotStageStarted"`
	SpotPieceTitle   string         `json:"spotPieceTitle"`
}

func (q *Queries) GetPracticePlanWithSpots(ctx context.Context, arg GetPracticePlanWithSpotsParams) ([]GetPracticePlanWithSpotsRow, error) {
	rows, err := q.db.QueryContext(ctx, getPracticePlanWithSpots, arg.ID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPracticePlanWithSpotsRow
	for rows.Next() {
		var i GetPracticePlanWithSpotsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Intensity,
			&i.Date,
			&i.Completed,
			&i.PracticeNotes,
			&i.LastPracticed,
			&i.SpotPracticeType,
			&i.SpotCompleted,
			&i.SpotName,
			&i.SpotID,
			&i.SpotMeasures,
			&i.SpotPieceID,
			&i.SpotStage,
			&i.SpotSkipDays,
			&i.SpotStageStarted,
			&i.SpotPieceTitle,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPracticePlanWithTodo = `-- name: GetPracticePlanWithTodo :one
SELECT
    practice_plans.id, practice_plans.user_id, practice_plans.intensity, practice_plans.date, practice_plans.completed, practice_plans.practice_notes, practice_plans.last_practiced,
    (SELECT COUNT(*) FROM practice_plan_spots WHERE practice_plan_spots.practice_plan_id = practice_plans.id AND practice_plan_spots.completed = true) AS completed_spots_count,
    (SELECT COUNT(*) FROM practice_plan_spots WHERE practice_plan_spots.practice_plan_id = practice_plans.id) AS spots_count,
    (SELECT COUNT(*) FROM practice_plan_pieces WHERE practice_plan_pieces.practice_plan_id = practice_plans.id AND practice_plan_pieces.completed = true) AS completed_pieces_count,
    (SELECT COUNT(*) FROM practice_plan_pieces WHERE practice_plan_pieces.practice_plan_id = practice_plans.id) AS pieces_count,
    (SELECT COUNT(*) FROM practice_plan_scales WHERE practice_plan_scales.practice_plan_id = practice_plans.id AND practice_plan_scales.completed = true) AS completed_scales_count,
    (SELECT COUNT(*) FROM practice_plan_scales WHERE practice_plan_scales.practice_plan_id = practice_plans.id) AS scales_count,
    IFNULL((SELECT GROUP_CONCAT(DISTINCT pieces.title||'@') FROM practice_plan_pieces INNER JOIN pieces ON practice_plan_pieces.piece_id = pieces.id WHERE practice_plan_pieces.practice_plan_id = practice_plans.id), '') AS piece_titles,
    IFNULL((SELECT GROUP_CONCAT(DISTINCT pieces.title||'@') FROM practice_plan_spots INNER JOIN spots ON spots.id = practice_plan_spots.spot_id INNER JOIN pieces ON pieces.id = spots.piece_id WHERE practice_plan_spots.practice_plan_id = practice_plans.id), '') AS spot_piece_titles
FROM practice_plans
WHERE practice_plans.id = ? AND practice_plans.user_id = ?
LIMIT 1
`

type GetPracticePlanWithTodoParams struct {
	ID     string `json:"id"`
	UserID string `json:"userId"`
}

type GetPracticePlanWithTodoRow struct {
	ID                   string         `json:"id"`
	UserID               string         `json:"userId"`
	Intensity            string         `json:"intensity"`
	Date                 int64          `json:"date"`
	Completed            bool           `json:"completed"`
	PracticeNotes        sql.NullString `json:"practiceNotes"`
	LastPracticed        sql.NullInt64  `json:"lastPracticed"`
	CompletedSpotsCount  int64          `json:"completedSpotsCount"`
	SpotsCount           int64          `json:"spotsCount"`
	CompletedPiecesCount int64          `json:"completedPiecesCount"`
	PiecesCount          int64          `json:"piecesCount"`
	CompletedScalesCount int64          `json:"completedScalesCount"`
	ScalesCount          int64          `json:"scalesCount"`
	PieceTitles          interface{}    `json:"pieceTitles"`
	SpotPieceTitles      interface{}    `json:"spotPieceTitles"`
}

func (q *Queries) GetPracticePlanWithTodo(ctx context.Context, arg GetPracticePlanWithTodoParams) (GetPracticePlanWithTodoRow, error) {
	row := q.db.QueryRowContext(ctx, getPracticePlanWithTodo, arg.ID, arg.UserID)
	var i GetPracticePlanWithTodoRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Intensity,
		&i.Date,
		&i.Completed,
		&i.PracticeNotes,
		&i.LastPracticed,
		&i.CompletedSpotsCount,
		&i.SpotsCount,
		&i.CompletedPiecesCount,
		&i.PiecesCount,
		&i.CompletedScalesCount,
		&i.ScalesCount,
		&i.PieceTitles,
		&i.SpotPieceTitles,
	)
	return i, err
}

const getPreviousPlanNotes = `-- name: GetPreviousPlanNotes :one
SELECT practice_notes
FROM practice_plans
WHERE user_id = ? AND id != ?
ORDER BY date DESC
LIMIT 1
`

type GetPreviousPlanNotesParams struct {
	UserID string `json:"userId"`
	PlanID string `json:"planId"`
}

func (q *Queries) GetPreviousPlanNotes(ctx context.Context, arg GetPreviousPlanNotesParams) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getPreviousPlanNotes, arg.UserID, arg.PlanID)
	var practice_notes sql.NullString
	err := row.Scan(&practice_notes)
	return practice_notes, err
}

const hasIncompleteInfrequentSpots = `-- name: HasIncompleteInfrequentSpots :one
SELECT  COUNT(*) > 0
FROM practice_plan_spots
WHERE practice_plan_spots.practice_type = 'interleave_days'
    AND practice_plan_spots.practice_plan_id = (SELECT practice_plans.id FROM practice_plans WHERE practice_plans.id = ?1 AND practice_plans.user_id = ?2)
    AND practice_plan_spots.completed = false
`

type HasIncompleteInfrequentSpotsParams struct {
	PlanID string `json:"planId"`
	UserID string `json:"userId"`
}

func (q *Queries) HasIncompleteInfrequentSpots(ctx context.Context, arg HasIncompleteInfrequentSpotsParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, hasIncompleteInfrequentSpots, arg.PlanID, arg.UserID)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const listPaginatedPracticePlans = `-- name: ListPaginatedPracticePlans :many
SELECT
    practice_plans.id, practice_plans.user_id, practice_plans.intensity, practice_plans.date, practice_plans.completed, practice_plans.practice_notes, practice_plans.last_practiced,
    (SELECT COUNT(*) FROM practice_plan_spots WHERE practice_plan_spots.practice_plan_id = practice_plans.id AND practice_plan_spots.completed = true) AS completed_spots_count,
    (SELECT COUNT(*) FROM practice_plan_spots WHERE practice_plan_spots.practice_plan_id = practice_plans.id) AS spots_count,
    (SELECT COUNT(*) FROM practice_plan_pieces WHERE practice_plan_pieces.practice_plan_id = practice_plans.id AND practice_plan_pieces.completed = true) AS completed_pieces_count,
    (SELECT COUNT(*) FROM practice_plan_pieces WHERE practice_plan_pieces.practice_plan_id = practice_plans.id) AS pieces_count,
    (SELECT COUNT(*) FROM practice_plan_scales WHERE practice_plan_scales.practice_plan_id = practice_plans.id AND practice_plan_scales.completed = true) AS completed_scales_count,
    (SELECT COUNT(*) FROM practice_plan_scales WHERE practice_plan_scales.practice_plan_id = practice_plans.id) AS scales_count,
    IFNULL((SELECT GROUP_CONCAT(DISTINCT pieces.title||'@') FROM practice_plan_pieces INNER JOIN pieces ON practice_plan_pieces.piece_id = pieces.id WHERE practice_plan_pieces.practice_plan_id = practice_plans.id), '') AS piece_titles,
    IFNULL((SELECT GROUP_CONCAT(DISTINCT pieces.title||'@') FROM practice_plan_spots INNER JOIN spots ON spots.id = practice_plan_spots.spot_id INNER JOIN pieces ON pieces.id = spots.piece_id WHERE practice_plan_spots.practice_plan_id = practice_plans.id), '') AS spot_piece_titles
FROM practice_plans
WHERE practice_plans.user_id = ?
ORDER BY practice_plans.date DESC
LIMIT ? OFFSET ?
`

type ListPaginatedPracticePlansParams struct {
	UserID string `json:"userId"`
	Limit  int64  `json:"limit"`
	Offset int64  `json:"offset"`
}

type ListPaginatedPracticePlansRow struct {
	ID                   string         `json:"id"`
	UserID               string         `json:"userId"`
	Intensity            string         `json:"intensity"`
	Date                 int64          `json:"date"`
	Completed            bool           `json:"completed"`
	PracticeNotes        sql.NullString `json:"practiceNotes"`
	LastPracticed        sql.NullInt64  `json:"lastPracticed"`
	CompletedSpotsCount  int64          `json:"completedSpotsCount"`
	SpotsCount           int64          `json:"spotsCount"`
	CompletedPiecesCount int64          `json:"completedPiecesCount"`
	PiecesCount          int64          `json:"piecesCount"`
	CompletedScalesCount int64          `json:"completedScalesCount"`
	ScalesCount          int64          `json:"scalesCount"`
	PieceTitles          interface{}    `json:"pieceTitles"`
	SpotPieceTitles      interface{}    `json:"spotPieceTitles"`
}

func (q *Queries) ListPaginatedPracticePlans(ctx context.Context, arg ListPaginatedPracticePlansParams) ([]ListPaginatedPracticePlansRow, error) {
	rows, err := q.db.QueryContext(ctx, listPaginatedPracticePlans, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPaginatedPracticePlansRow
	for rows.Next() {
		var i ListPaginatedPracticePlansRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Intensity,
			&i.Date,
			&i.Completed,
			&i.PracticeNotes,
			&i.LastPracticed,
			&i.CompletedSpotsCount,
			&i.SpotsCount,
			&i.CompletedPiecesCount,
			&i.PiecesCount,
			&i.CompletedScalesCount,
			&i.ScalesCount,
			&i.PieceTitles,
			&i.SpotPieceTitles,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPracticePlanPiecesInCategory = `-- name: ListPracticePlanPiecesInCategory :many
SELECT practice_plan_pieces.completed,
    practice_plan_pieces.completed AS piece_completed,
    pieces.title AS piece_title,
    pieces.id AS piece_id,
    pieces.composer AS piece_composer,
    (SELECT COUNT(id) FROM spots WHERE spots.piece_id = pieces.id AND spots.stage != 'completed') AS piece_active_spots,
    (SELECT COUNT(id) FROM spots WHERE spots.piece_id = pieces.id AND spots.stage == 'random') AS piece_random_spots,
    (SELECT COUNT(id) FROM spots WHERE spots.piece_id = pieces.id AND spots.stage == 'completed') AS piece_completed_spots
FROM practice_plan_pieces
INNER JOIN pieces ON practice_plan_pieces.piece_id = pieces.id
WHERE practice_plan_pieces.practice_type = ?1
AND practice_plan_pieces.practice_plan_id = (SELECT practice_plans.id FROM practice_plans WHERE practice_plans.id = ?2 AND practice_plans.user_id = ?3)
ORDER BY practice_plan_pieces.idx
`

type ListPracticePlanPiecesInCategoryParams struct {
	PracticeType string `json:"practiceType"`
	PlanID       string `json:"planId"`
	UserID       string `json:"userId"`
}

type ListPracticePlanPiecesInCategoryRow struct {
	Completed           bool           `json:"completed"`
	PieceCompleted      bool           `json:"pieceCompleted"`
	PieceTitle          string         `json:"pieceTitle"`
	PieceID             string         `json:"pieceId"`
	PieceComposer       sql.NullString `json:"pieceComposer"`
	PieceActiveSpots    int64          `json:"pieceActiveSpots"`
	PieceRandomSpots    int64          `json:"pieceRandomSpots"`
	PieceCompletedSpots int64          `json:"pieceCompletedSpots"`
}

func (q *Queries) ListPracticePlanPiecesInCategory(ctx context.Context, arg ListPracticePlanPiecesInCategoryParams) ([]ListPracticePlanPiecesInCategoryRow, error) {
	rows, err := q.db.QueryContext(ctx, listPracticePlanPiecesInCategory, arg.PracticeType, arg.PlanID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPracticePlanPiecesInCategoryRow
	for rows.Next() {
		var i ListPracticePlanPiecesInCategoryRow
		if err := rows.Scan(
			&i.Completed,
			&i.PieceCompleted,
			&i.PieceTitle,
			&i.PieceID,
			&i.PieceComposer,
			&i.PieceActiveSpots,
			&i.PieceRandomSpots,
			&i.PieceCompletedSpots,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPracticePlanSpotsInCategory = `-- name: ListPracticePlanSpotsInCategory :many
SELECT practice_plan_spots.completed,
    spots.name,
    spots.id,
    spots.measures,
    spots.piece_id,
    spots.stage,
    spots.stage_started,
    spots.skip_days,
    (SELECT pieces.title FROM pieces WHERE pieces.id = spots.piece_id LIMIT 1) AS piece_title
FROM practice_plan_spots
INNER JOIN spots ON practice_plan_spots.spot_id = spots.id
WHERE practice_plan_spots.practice_type = ?1
AND practice_plan_spots.practice_plan_id = (SELECT practice_plans.id FROM practice_plans WHERE practice_plans.id = ?2 AND practice_plans.user_id = ?3)
ORDER BY practice_plan_spots.idx
`

type ListPracticePlanSpotsInCategoryParams struct {
	PracticeType string `json:"practiceType"`
	PlanID       string `json:"planId"`
	UserID       string `json:"userId"`
}

type ListPracticePlanSpotsInCategoryRow struct {
	Completed    bool           `json:"completed"`
	Name         string         `json:"name"`
	ID           string         `json:"id"`
	Measures     sql.NullString `json:"measures"`
	PieceID      string         `json:"pieceId"`
	Stage        string         `json:"stage"`
	StageStarted sql.NullInt64  `json:"stageStarted"`
	SkipDays     int64          `json:"skipDays"`
	PieceTitle   string         `json:"pieceTitle"`
}

func (q *Queries) ListPracticePlanSpotsInCategory(ctx context.Context, arg ListPracticePlanSpotsInCategoryParams) ([]ListPracticePlanSpotsInCategoryRow, error) {
	rows, err := q.db.QueryContext(ctx, listPracticePlanSpotsInCategory, arg.PracticeType, arg.PlanID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPracticePlanSpotsInCategoryRow
	for rows.Next() {
		var i ListPracticePlanSpotsInCategoryRow
		if err := rows.Scan(
			&i.Completed,
			&i.Name,
			&i.ID,
			&i.Measures,
			&i.PieceID,
			&i.Stage,
			&i.StageStarted,
			&i.SkipDays,
			&i.PieceTitle,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRecentPracticePlans = `-- name: ListRecentPracticePlans :many
SELECT
    practice_plans.id, practice_plans.user_id, practice_plans.intensity, practice_plans.date, practice_plans.completed, practice_plans.practice_notes, practice_plans.last_practiced,
    (SELECT COUNT(*) FROM practice_plan_spots WHERE practice_plan_spots.practice_plan_id = practice_plans.id AND practice_plan_spots.completed = true) AS completed_spots_count,
    (SELECT COUNT(*) FROM practice_plan_spots WHERE practice_plan_spots.practice_plan_id = practice_plans.id) AS spots_count,
    (SELECT COUNT(*) FROM practice_plan_pieces WHERE practice_plan_pieces.practice_plan_id = practice_plans.id AND practice_plan_pieces.completed = true) AS completed_pieces_count,
    (SELECT COUNT(*) FROM practice_plan_pieces WHERE practice_plan_pieces.practice_plan_id = practice_plans.id) AS pieces_count,
    IFNULL((SELECT GROUP_CONCAT(DISTINCT pieces.title||'@') FROM practice_plan_pieces INNER JOIN pieces ON practice_plan_pieces.piece_id = pieces.id WHERE practice_plan_pieces.practice_plan_id = practice_plans.id), '') AS piece_titles,
    IFNULL((SELECT GROUP_CONCAT(DISTINCT pieces.title||'@') FROM practice_plan_spots INNER JOIN spots ON spots.id = practice_plan_spots.spot_id INNER JOIN pieces ON pieces.id = spots.piece_id WHERE practice_plan_spots.practice_plan_id = practice_plans.id), '') AS spot_piece_titles
FROM practice_plans
WHERE practice_plans.id != ? AND practice_plans.user_id = ?
ORDER BY practice_plans.date DESC
LIMIT 3
`

type ListRecentPracticePlansParams struct {
	ID     string `json:"id"`
	UserID string `json:"userId"`
}

type ListRecentPracticePlansRow struct {
	ID                   string         `json:"id"`
	UserID               string         `json:"userId"`
	Intensity            string         `json:"intensity"`
	Date                 int64          `json:"date"`
	Completed            bool           `json:"completed"`
	PracticeNotes        sql.NullString `json:"practiceNotes"`
	LastPracticed        sql.NullInt64  `json:"lastPracticed"`
	CompletedSpotsCount  int64          `json:"completedSpotsCount"`
	SpotsCount           int64          `json:"spotsCount"`
	CompletedPiecesCount int64          `json:"completedPiecesCount"`
	PiecesCount          int64          `json:"piecesCount"`
	PieceTitles          interface{}    `json:"pieceTitles"`
	SpotPieceTitles      interface{}    `json:"spotPieceTitles"`
}

func (q *Queries) ListRecentPracticePlans(ctx context.Context, arg ListRecentPracticePlansParams) ([]ListRecentPracticePlansRow, error) {
	rows, err := q.db.QueryContext(ctx, listRecentPracticePlans, arg.ID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListRecentPracticePlansRow
	for rows.Next() {
		var i ListRecentPracticePlansRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Intensity,
			&i.Date,
			&i.Completed,
			&i.PracticeNotes,
			&i.LastPracticed,
			&i.CompletedSpotsCount,
			&i.SpotsCount,
			&i.CompletedPiecesCount,
			&i.PiecesCount,
			&i.PieceTitles,
			&i.SpotPieceTitles,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlanLastPracticed = `-- name: UpdatePlanLastPracticed :exec
UPDATE practice_plans
SET last_practiced = unixepoch("now")
WHERE id = ? AND user_id = ?
`

type UpdatePlanLastPracticedParams struct {
	ID     string `json:"id"`
	UserID string `json:"userId"`
}

func (q *Queries) UpdatePlanLastPracticed(ctx context.Context, arg UpdatePlanLastPracticedParams) error {
	_, err := q.db.ExecContext(ctx, updatePlanLastPracticed, arg.ID, arg.UserID)
	return err
}

const updatePlanPieceIdx = `-- name: UpdatePlanPieceIdx :exec
UPDATE practice_plan_pieces
SET idx = ?
WHERE practice_plan_id = (SELECT practice_plans.id FROM practice_plans WHERE practice_plans.id = ? AND practice_plans.user_id = ?)
AND piece_id = ?
AND practice_type = ?
`

type UpdatePlanPieceIdxParams struct {
	Idx          int64  `json:"idx"`
	PlanID       string `json:"planId"`
	UserID       string `json:"userId"`
	PieceID      string `json:"pieceId"`
	PracticeType string `json:"practiceType"`
}

func (q *Queries) UpdatePlanPieceIdx(ctx context.Context, arg UpdatePlanPieceIdxParams) error {
	_, err := q.db.ExecContext(ctx, updatePlanPieceIdx,
		arg.Idx,
		arg.PlanID,
		arg.UserID,
		arg.PieceID,
		arg.PracticeType,
	)
	return err
}

const updatePlanSpotIdx = `-- name: UpdatePlanSpotIdx :exec
UPDATE practice_plan_spots
SET idx = ?
WHERE practice_plan_id = (SELECT practice_plans.id FROM practice_plans WHERE practice_plans.id = ? AND practice_plans.user_id = ?)
AND spot_id = ?
`

type UpdatePlanSpotIdxParams struct {
	Idx    int64  `json:"idx"`
	PlanID string `json:"planId"`
	UserID string `json:"userId"`
	SpotID string `json:"spotId"`
}

func (q *Queries) UpdatePlanSpotIdx(ctx context.Context, arg UpdatePlanSpotIdxParams) error {
	_, err := q.db.ExecContext(ctx, updatePlanSpotIdx,
		arg.Idx,
		arg.PlanID,
		arg.UserID,
		arg.SpotID,
	)
	return err
}

const updateSpotEvaluation = `-- name: UpdateSpotEvaluation :exec
UPDATE practice_plan_spots
SET evaluation = CASE WHEN evaluation IS NULL OR evaluation <> 'poor' THEN ?1 ELSE evaluation END
WHERE practice_plan_id = (SELECT practice_plans.id FROM practice_plans WHERE practice_plans.id = ?2 AND practice_plans.user_id = ?3)
AND spot_id = ?4
`

type UpdateSpotEvaluationParams struct {
	Evaluation sql.NullString `json:"evaluation"`
	PlanID     string         `json:"planId"`
	UserID     string         `json:"userId"`
	SpotID     string         `json:"spotId"`
}

func (q *Queries) UpdateSpotEvaluation(ctx context.Context, arg UpdateSpotEvaluationParams) error {
	_, err := q.db.ExecContext(ctx, updateSpotEvaluation,
		arg.Evaluation,
		arg.PlanID,
		arg.UserID,
		arg.SpotID,
	)
	return err
}
