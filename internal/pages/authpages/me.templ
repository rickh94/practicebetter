package authpages

import "github.com/go-webauthn/webauthn/protocol"
import "practicebetter/internal/db"
import "practicebetter/internal/components"
import "practicebetter/internal/pages"

script startRegistration(creationOptions *protocol.CredentialCreation, csrf string) {
	globalThis.startPasskeyRegistration(creationOptions.publicKey, csrf)
}

script startRegistrationFromDialog(creationOptions *protocol.CredentialCreation, csrf string) {
	globalThis.closeModal("recommend-dialog")
	globalThis.startPasskeyRegistration(creationOptions.publicKey, csrf)
}

script deletePasskeys() {
	document.getElementById("passkey-count").innerHTML = "0";
}

script redirectToNext() {
    const nextLoc = globalThis.getNextLocFromCookie();
    if (nextLoc) {
      window.location.href = nextLoc;
    } else {
      window.location.href = "/library";
    }
}

// TODO: display reminder if user email is not verified

templ UserInfo(user db.User, csrf string) {
	<title>Account | Go Practice</title>
	<div class="flex flex-col p-4 rounded-xl bg-neutral-700/5" id="user-info">
		<div class="px-4 pb-1 sm:px-0">
			<h3 class="text-xl font-semibold leading-7 text-neutral-900">
				Account Information
			</h3>
			<p class="max-w-2xl text-sm leading-6 text-neutral-500">
				View your account information
			</p>
		</div>
		<dl class="divide-y divide-neutral-700 border-y border-neutral-700">
			<div class="py-4 px-4 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-0">
				<dt class="text-sm font-medium leading-6 text-neutral-900">
					Full name
				</dt>
				<dd class="mt-1 text-sm leading-6 sm:col-span-2 sm:mt-0 text-neutral-700">
					if user.Fullname != "" {
						{ user.Fullname }
					} else {
						No Name
					}
				</dd>
			</div>
			<div class="py-4 px-4 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-0">
				<dt class="text-sm font-medium leading-6 text-neutral-900">
					Email
				</dt>
				<dd class="mt-1 text-sm leading-6 sm:col-span-2 sm:mt-0 text-neutral-700">
					{ user.Email }
				</dd>
			</div>
		</dl>
		<div class="flex pt-4 pb-0 w-full">
			<button
 				hx-get="/auth/me/edit"
 				hx-headers={ components.HxCsrfHeader(csrf) }
 				hx-swap="outerHTML transition:true"
 				hx-target="#user-info"
 				class="w-full action-button amber focusable"
			>
				<span class="-ml-1 size-5 icon-[iconamoon--edit-thin]" aria-hidden="true"></span>
				Edit
			</button>
		</div>
	</div>
}

templ UserForm(user db.User, csrf string, errors map[string]string) {
	<div class="flex flex-col p-4 rounded-xl bg-neutral-700/5" id="user-info">
		<div class="px-4 pb-1 sm:px-0">
			<h3 class="text-xl font-semibold leading-7 text-neutral-900">
				Edit Information
			</h3>
			<p class="max-w-2xl text-sm leading-6 text-neutral-500">
				Edit your account information
			</p>
		</div>
		<form
 			class="flex flex-col flex-grow justify-between"
 			action="/auth/me"
 			method="POST"
 			hx-post="/auth/me"
 			hx-swap="outerHTML transition:true"
 			hx-target="#user-info"
		>
			<input type="hidden" name="gorilla.csrf.Token" value={ csrf }/>
			<div class="divide-y divide-neutral-700 border-y border-neutral-700">
				<div class="py-2 px-4 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-0">
					<div class="flex items-center w-full h-full">
						<label
 							class="text-sm font-medium leading-6 text-neutral-900"
 							for="name"
						>
							Full name
						</label>
					</div>
					<div class="text-sm leading-6 sm:col-span-2 sm:mt-0 text-neutral-700">
						<input
 							value={ user.Fullname }
 							type="text"
 							id="name"
 							name="name"
 							autoComplete="name"
 							placeholder="Enter your Name"
 							class="w-full basic-field"
						/>
						if errors["name"] != "" {
							<p class="mt-2 text-sm text-red-600">{ errors["name"] }</p>
						}
					</div>
				</div>
				<div class="py-2 px-4 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-0">
					<div class="flex items-center w-full h-full">
						<label
 							class="text-sm font-medium leading-6 text-neutral-900"
 							for="email"
						>
							Email
						</label>
					</div>
					<div class="text-sm leading-6 sm:col-span-2 sm:mt-0 text-neutral-700">
						<input
 							value={ user.Email }
 							type="email"
 							id="email"
 							name="email"
 							autoComplete="home email"
 							placeholder="test@example.com"
 							class="w-full basic-field"
						/>
						if errors["email"] != "" {
							<p class="mt-2 text-sm text-red-600">{ errors["email"] }</p>
						}
					</div>
				</div>
			</div>
			<div class="flex flex-row-reverse gap-4 pt-4 pb-0 w-full">
				<button
 					type="submit"
 					class="action-button green focusable"
				>
					<span class="-ml-1 size-6 icon-[iconamoon--arrow-up-5-circle-thin]" aria-hidden="true"></span>
					Save
				</button>
				<button
 					hx-get="/auth/me/reset"
 					hx-headers={ components.HxCsrfHeader(csrf) }
 					hx-swap="outerHTML transition:true"
 					hx-target="#user-info"
 					class="action-button amber focusable"
				>
					<span class="-ml-1 size-6 icon-[iconamoon--sign-times-circle-thin]" aria-hidden="true"></span>
					Cancel
				</button>
			</div>
		</form>
	</div>
}

// TODO: add ability to edit user profile

templ MePage(user db.User, creationOptions *protocol.CredentialCreation, csrf string, credentialCount string, s pages.ServerUtil) {
	@components.SingleColumnLayout(components.TwoButtonBar(components.InternalNav(), components.HeadingText("User Info"), components.LogoutLink())) {
		@components.TwoColumnContainer() {
			@UserInfo(user, csrf)
			<div class="p-4 rounded-xl bg-neutral-700/5">
				<div class="px-4 pb-1 sm:px-0">
					<h3 class="text-xl font-semibold leading-7 text-neutral-900">
						Passkey Information
					</h3>
					<p class="max-w-2xl text-sm leading-6 text-neutral-500">
						Manage your passkeys
					</p>
				</div>
				<dl class="border-t divide-y divide-neutral-700 border-neutral-700">
					<div class="grid grid-cols-2 gap-4 py-2 px-0">
						<dt class="text-sm font-medium leading-6 text-neutral-900">
							Number of Passkeys
						</dt>
						<dd class="mt-0 text-sm leading-6 text-neutral-700" id="passkey-count">
							{ credentialCount }
						</dd>
					</div>
					<div class="py-2 sm:gap-4 sm:px-0">
						<dt class="sr-only">
							<span>Register a Passkey</span>
						</dt>
						<dd class="mt-1 text-sm leading-6 text-neutral-700">
							<button
 								type="button"
 								onclick={ startRegistration(creationOptions, csrf) }
 								class="w-full action-button green focusable"
							>
								<span class="-ml-1 size-5 icon-[ph--fingerprint-thin]" aria-hidden="true"></span>
								Register a Passkey
							</button>
						</dd>
					</div>
					<div class="py-2 sm:gap-4 sm:px-0">
						<dt class="sr-only">
							<span>Delete Your Passkeys</span>
						</dt>
						<dd class="mt-1 w-full text-sm leading-6 text-neutral-700">
							<button
 								type="button"
 								hx-post="/auth/passkey/delete"
 								hx-headers={ components.HxCsrfHeader(csrf) }
 								hx-swap="none"
 								hx-confirm="Are you sure you want to delete all your passkeys?"
 								hx-on::after-request={ deletePasskeys() }
 								class="w-full action-button red focusable"
							>
								<span class="-ml-1 size-5 icon-[iconamoon--trash-thin]" aria-hidden="true"></span>
								Delete All Passkeys
							</button>
						</dd>
					</div>
				</dl>
			</div>
			<dialog id="recommend-dialog" aria-labelledby="recommend-dialog-title" class="bg-gradient-to-t from-neutral-50 to-[#fff9ee] text-left flex flex-col gap-2 sm:max-w-xl px-4 py-4">
				<header class="mt-2 text-center sm:text-left">
					<h3 id="recommend-dialog-title" class="text-2xl font-semibold leading-6 text-neutral-900">Register a Passkey</h3>
				</header>
				<div class="flex flex-col gap-2 mt-2 mb-4 text-lg">
					<p>For easier login next time, you can save a passkey and use your phone or device to log in instantly.</p>
					<p>Only do this on your own device, never a public or borrowed device.</p>
				</div>
				<div class="flex flex-col-reverse gap-2 w-full sm:grid sm:grid-cols-2">
					<button
 						id="recommend-no"
 						type="button"
 						onclick={ redirectToNext() }
 						class="action-button red focusable"
					>
						<span class="-ml-1 size-6 icon-[iconamoon--sign-times-circle-thin]" aria-hidden="true"></span>
						No, Thanks
					</button>
					<button
 						type="button"
 						id="recommend-yes"
 						onclick={ startRegistrationFromDialog(creationOptions, csrf) }
 						class="action-button green focusable"
					>
						<span class="-ml-1 size-6 icon-[ph--fingerprint-thin]" aria-hidden="true"></span>
						Register a Passkey
					</button>
				</div>
			</dialog>
			<script type="module" src={ s.StaticUrl("dist/me.js") }></script>
		}
	}
}
