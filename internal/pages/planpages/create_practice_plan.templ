package planpages

import "practicebetter/internal/db"
import "practicebetter/internal/components"
import "practicebetter/internal/pages"
import "database/sql"

script changeSelectedIntensity(value string) {
	for (const el of document.querySelectorAll('#intensities .radio-option')) {
		if (el.id === `intensity-${value}-label`) {
			el.classList.add('checked');
		} else {
			el.classList.remove('checked');
		}
	}
}

script togglePieceChecked(value string) {
	document.getElementById(`piece-${value}-label`).classList.toggle('checked');
}

script toggleChecked(id string) {
	document.getElementById(id).classList.toggle('checked');
}

script showMoreOptions() {
	document.getElementById("more-options-content").classList.remove("hidden");
	document.getElementById("show-more-options-button").classList.add("hidden");
	document.getElementById("hide-more-options-button").classList.remove("hidden");
}

script hideMoreOptions() {
	document.getElementById("more-options-content").classList.add("hidden");
	document.getElementById("show-more-options-button").classList.remove("hidden");
	document.getElementById("hide-more-options-button").classList.add("hidden");
}

type PlanCreationErrors struct {
	Pieces       string
	Intensity    string
	PracticeType string
}

templ CreatePracticePlanPage(s pages.ServerUtil, csrf string, pieces []db.ListActiveUserPiecesRow, errors PlanCreationErrors) {
	<title>Create Practice Plan | Go Practice</title>
	@components.SingleColumnLayout(components.TwoButtonBar(components.InternalNav(), components.HeadingText("Create Practice Plan") , components.MaybePracticePlan())) {
		@components.BreadcrumbContainer() {
			@components.Breadcrumb([]components.BreadcrumbInfo{
					{ Label: "Library", Href: "/library", Active: false },
					{ Label: "Practice Plans", Href: "/library/plans", Active: false },
					{ Label: "New", Href: "/library/plans/create", Active: true },
				})
		}
		@components.NormalContainer() {
			<form
 				class="flex flex-col"
 				action="/library/plans"
 				method="post"
 				hx-post="/library/plans"
 				hx-target="#main-content"
 				hx-swap="outerHTML transition:true"
			>
				@createPracticePlanFormFields(csrf, pieces, errors)
			</form>
		}
	}
}

templ createPracticePlanFormFields(csrf string, pieces []db.ListActiveUserPiecesRow, errors PlanCreationErrors) {
	<input type="hidden" name="gorilla.csrf.Token" value={ csrf }/>
	if errors.Intensity != "" {
		<p class="italic text-red-600">
			{ errors.Intensity }
		</p>
	}
	<div class="flex flex-wrap gap-2 items-center w-full">
		<label class="sr-only" for="intensity">Plan Intensity</label>
		<div class="flex flex-nowrap flex-shrink-0 items-center h-10">
			<span class="flex-shrink-0 text-lg align-middle text-pretty text-neutral-800">I would like a</span>
		</div>
		<select
 			required
 			id="intensity"
 			name="intensity"
 			class="flex-grow-0 py-2 pr-8 pl-4 w-max bg-white rounded-xl border shadow-sm transition duration-200 focus:shadow border-neutral-800 shadow-neutral-300 text-neutral-800 placeholder-neutral-600 custom-select focusable focus:border-neutral-800 focus:shadow-neutral-700/20"
		>
			<option value="light">
				Light
			</option>
			<option value="medium" selected>
				Medium
			</option>
			<option value="heavy">
				Heavy
			</option>
		</select>
		<div class="flex flex-nowrap flex-shrink-0 items-center h-10">
			<span class="flex-shrink-0 text-lg text-pretty text-neutral-800">intensity practice session,</span>
		</div>
		<div class="flex flex-nowrap flex-shrink-0 items-center h-10">
			<span class="flex-shrink-0 text-lg whitespace-nowrap text-neutral-800">where I will practice: </span>
		</div>
		if errors.PracticeType != "" {
			<p class="italic text-red-600">
				{ errors.PracticeType }
			</p>
		}
		<div class="flex flex-col flex-wrap gap-2 w-full xs:flex-row xs:w-auto">
			@practiceCheckbox("icon-[ph--steps]","Scales & Arppegios", "scale", true)
			@practiceCheckbox("icon-[fluent--reading-mode-mobile-20-regular]","Sight Reading", "reading", false)
			@practiceCheckbox("icon-[iconamoon--bookmark-thin]","Interleave Spots", "practice_interleave", true)
			@practiceCheckbox("icon-[iconamoon--playlist-shuffle-thin]","Random Spots", "practice_random_single", true)
			@practiceCheckbox("icon-[custom--random-boxes]","Random Starting Point", "practice_starting_point", false)
			@practiceCheckbox("icon-[iconamoon--playlist-repeat-list-thin]","New Spots", "practice_new", true)
		</div>
	</div>
	<section id="pieces" class="grid grid-cols-1 gap-2 mt-4 sm:grid-cols-2 md:col-span-2 lg:grid-cols-3 h-min">
		if errors.Pieces != "" {
			<p class="italic text-red-600">
				{ errors.Pieces }
			</p>
		}
		<p class="col-span-full pb-1 w-full text-lg leading-6 text-neutral-800">I will practice these pieces:</p>
		for i, piece := range pieces {
			@pieceCheckbox(piece.Title,piece.Composer, piece.ID, i < 3)
		}
		if len(pieces) == 0 {
			<div class="flex flex-col col-span-full gap-1">
				<h3 class="text-xl font-bold tracking-tight text-neutral-800">
					No Active Pieces
				</h3>
				<p>
					There are no active pieces in your library. You’ll need create a piece or move one to the “active” stage.
				</p>
				<div class="flex flex-col gap-4 py-2 xs:flex-row">
					@components.HxLink("action-button indigo focusable", "/library/pieces", "#main-content") {
						<span class="-ml-1 size-8 icon-[custom--music-folder]" aria-hidden="true"></span>
						View Pieces
					}
					@components.HxLink("action-button green focusable", "/library/pieces/create", "#main-content") {
						<span class="-ml-1 size-8 icon-[custom--music-note-edit]" aria-hidden="true"></span>
						Create Piece
					}
				</div>
			</div>
		}
	</section>
	<section id="more-options" class="grid grid-cols-1 gap-2 mt-4 sm:grid-cols-2 md:col-span-2 lg:grid-cols-3 h-min">
		<div class="flex col-span-full">
			<button
 				type="button"
 				onclick={ showMoreOptions() }
 				id="show-more-options-button"
 				class="action-button blue focusable"
			>
				Show More Options
				<span class="-mr-1 size-6 icon-[iconamoon--arrow-down-6-circle-thin]" aria-hidden="true"></span>
			</button>
			<button
 				type="button"
 				onclick={ hideMoreOptions() }
 				id="hide-more-options-button"
 				class="hidden action-button blue focusable"
			>
				Hide More Options
				<span class="-mr-1 size-6 icon-[iconamoon--arrow-up-6-circle-thin]" aria-hidden="true"></span>
			</button>
		</div>
		<div id="more-options-content" class="hidden subgrid">
			<label class="flex gap-2 items-center px-2 font-medium accent-neutral-800 focusable">
				<input type="checkbox" name="modal-scales" class="focus:outline-none"/>
				<span class="text-neutral-800">Include Uncommon Scales</span>
			</label>
		</div>
	</section>
	<section id="customize" class="flex col-span-full justify-end pt-4 w-full">
		<label class="flex gap-2 items-center px-2 font-medium accent-neutral-800 focusable">
			<span class="text-neutral-800">Customize after creating</span>
			<input type="checkbox" name="customize" class="focus:outline-none"/>
		</label>
	</section>
	<div class="flex flex-row-reverse col-span-full gap-4 justify-start py-4">
		<button
 			type="submit"
 			class="action-button green focusable"
		>
			<span class="-ml-1 size-6 icon-[custom--music-file-curly-pencil]" aria-hidden="true"></span>
			Create
		</button>
		@components.HxLink("action-button amber focusable", "/library", "#main-content") {
			<span class="-ml-1 size-6 icon-[iconamoon--arrow-left-5-circle-thin]" aria-hidden="true"></span>
			Go Back
		}
	</div>
}

templ pieceCheckbox(title string, composer sql.NullString, value string, checked bool) {
	<label
 		for={ "piece-" + value }
 		class={ "piece-checkbox cursor-pointer h-max focusable", templ.KV("checked", checked) }
 		id={ "piece-" + value + "-label" }
	>
		<input
 			type="checkbox"
 			name="pieces"
 			id={ "piece-" + value }
 			value={ value }
 			onchange={ togglePieceChecked(value) }
 			class="sr-only"
 			aria-labelledby={ "piece-" + value + "-label" }
 			checked?={ checked }
		/>
		<span class="flex flex-1">
			<span>
				<span class="font-medium">
					{ title }
				</span>
				if composer.Valid && composer.String != "" {
					<span class="italic">
						- { composer.String }
					</span>
				}
			</span>
		</span>
		<span class="ml-2 text-indigo-800 size-6 icon icon-[iconamoon--check-circle-1-duotone]" aria-hidden="true"></span>
	</label>
}

templ practiceCheckbox(iconClass string, text string, value string, checked bool) {
	<label
 		for={ value }
 		class={ "w-full xs:w-auto cursor-pointer practice-radio-option focusable", templ.KV("checked", checked) }
 		id={ value + "-label" }
	>
		<input
 			type="checkbox"
 			name={ value }
 			id={ value }
 			onchange={ toggleChecked(value + "-label") }
 			class="sr-only"
 			aria-labelledby={ value + "-label" }
 			checked?={ checked }
		/>
		<span class="flex flex-1 gap-1 items-center">
			<span class={ iconClass, "size-5 -ml-1" } aria-hidden="true"></span>
			<span>
				{ text }
			</span>
		</span>
		<span class="ml-2 text-black size-5 icon icon-[iconamoon--check-circle-1-duotone]" aria-hidden="true"></span>
	</label>
}
