package planpages

import "practicebetter/internal/components"
import "practicebetter/internal/heroicons"
import "strconv"

templ AddPieceWizard(practiceType string, planID string, id string, title string) {
	<button
 		type="button"
 		class="flex gap-1 justify-center items-center py-2 px-4 font-semibold text-green-800 rounded-xl transition duration-200 bg-green-700/10 hover:bg-green-700/20 focusable"
 		hx-get={ "/library/plans/" + planID + "/pieces/" + practiceType + "/add" }
 		hx-target={ "#" + id + "-chooser" }
 		hx-swap="innerHTML"
 		hx-on::after-request={ components.ShowModal(id) }
	>
		@heroicons.IconPlusCircleSolid("-ml-1 size-5")
		Add Pieces
	</button>
	<dialog id={ id } aria-labelledby={ id + "-modal-title" } class="flex max-h-[75svh] overflow-y-clip flex-col gap-2 bg-gradient-to-t from-neutral-50 to-[#fff9ee] text-left">
		<header class="overflow-y-hidden flex-shrink-0 p-4 mt-2 max-w-2xl max-h-20 text-center sm:text-left">
			<h3 id={ id + "-modal-title" } class="text-lg font-semibold leading-6 text-neutral-900">{ title }</h3>
			<p class="text-sm">Click a piece below to add it.</p>
		</header>
		<div class="flex overflow-y-scroll flex-col flex-grow gap-2 px-4 pb-4 w-full max-w-2xl edit-plan-chooser overflow-x-clip" id={ id + "-chooser" }></div>
		<div class="flex gap-2 justify-end p-4 w-full max-h-20">
			<button class="w-full text-green-800 action-button bg-green-700/10 hover:bg-green-700/20 focusable" onClick={ components.CloseModal(id) }>
				@heroicons.IconCheckCircleSolid("-ml-1 size-5")
				Done
			</button>
		</div>
	</dialog>
}

templ AddPieceItem(piece PracticePlanPiece, planID string, csrf string, practiceType string) {
	<li id={ "add-piece-" + piece.ID } class={ "block transition-all duration-200 spot-card" }>
		<form
 			hx-put={ "/library/plans/" + planID + "/pieces/" + practiceType }
 			hx-target={ "#" + practiceType + "-list" }
 			hx-swap="outerHTML"
 			action="#"
 			method="post"
 			hx-on::after-request={ removeAddedItem("add-piece-" + piece.ID) }
 			id={ "add-piece-" + piece.ID + "-label" }
 			class="w-full h-full"
		>
			<input type="hidden" name="gorilla.csrf.Token" value={ csrf }/>
			<input type="hidden" name="add-pieces" value={ piece.ID }/>
			<button
 				type="submit"
 				class="flex items-center py-4 px-6 w-full h-full text-left rounded-xl transition-all duration-200 text-neutral-700 bg-green-500/10 hover:bg-green-500/20 focusable"
			>
				<div class="flex flex-col flex-1 flex-grow gap-1">
					<div>
						<strong class="text-xl font-bold">{ piece.Title }</strong>
						<span class="whitespace-nowrap">
							â€”{ " " }{ piece.Composer }
						</span>
					</div>
					if practiceType == "random_spots" {
						<div>Random Spots: { strconv.FormatInt(piece.RandomSpots, 10) }</div>
					}
					<span class="font-bold text-green-800">
						Click to Add
					</span>
				</div>
				<div class="flex flex-grow-0 items-center">
					@heroicons.IconPlusCircleSolid("size-10 -mr-2 text-green-900")
				</div>
			</button>
		</form>
	</li>
}

templ AddPieceFormList(pieces []PracticePlanPiece, csrf string, planID string, practiceType string) {
	<div id="piece-chooser">
		<ul id="add-piece-list" class="grid overflow-y-scroll grid-cols-1 gap-2 w-full list-none lg:grid-cols-2">
			for _, piece := range pieces {
				@AddPieceItem(piece, planID, csrf, practiceType)
			}
		</ul>
		if len(pieces) == 0 {
			<p class="text-neutral-700">No matching pieces found.</p>
		}
	</div>
}
