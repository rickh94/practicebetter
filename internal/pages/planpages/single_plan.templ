package planpages

import "practicebetter/internal/components"
import "strconv"
import "time"
import "practicebetter/internal/pages"

type PracticePlanSpot struct {
	ID               string
	Name             string
	Measures         string
	PieceTitle       string
	PieceID          string
	Completed        bool
	SkipDays         int64
	DaysSinceStarted int64
}

type PracticePlanPiece struct {
	ID             string
	Title          string
	Completed      bool
	Composer       string
	ActiveSpots    int64
	CompletedSpots int64
	RandomSpots    int64
}

type PracticePlanData struct {
	ID                           string
	IsActive                     bool
	Date                         int64
	InterleaveDaysSpots          []PracticePlanSpot
	InterleaveDaysSpotsCompleted bool
	ExtraRepeatSpots             []PracticePlanSpot
	InterleaveSpots              []PracticePlanSpot
	InterleaveSpotsCompleted     bool
	RandomSpotsPieces            []PracticePlanPiece
	RandomStartPieces            []PracticePlanPiece
	NewSpots                     []PracticePlanSpot
	Completed                    bool
	CompletedItems               int
	TotalItems                   int
	Intensity                    string
}

// TODO: create interleave/interleave days practice page for a spot
// TODO: create variants of all the cards that swap the link icon for a check and disable or change color
// TODO: add piece title to spot card

func canResume(planData PracticePlanData) bool {
	if planData.IsActive {
		return false
	}
	if time.Since(time.Unix(planData.Date, 0)) > 5*time.Hour {
		return false
	}
	if !planData.InterleaveDaysSpotsCompleted {
		return true
	}
	for _, spot := range planData.ExtraRepeatSpots {
		if !spot.Completed {
			return true
		}
	}
	if !planData.InterleaveSpotsCompleted {
		return true
	}
	for _, piece := range planData.RandomSpotsPieces {
		if !piece.Completed {
			return true
		}
	}
	for _, piece := range planData.RandomStartPieces {
		if !piece.Completed {
			return true
		}
	}
	for _, spot := range planData.NewSpots {
		if !spot.Completed {
			return true
		}
	}
	return false
}

templ PracticePlanPage(s pages.ServerUtil, planData PracticePlanData, csrf string) {
	<title>Practice Plan | Practice Better</title>
	@components.SingleColumnLayout(components.TwoButtonBar(components.InternalNav(), components.HeadingText("Practice Plan") , components.MaybePracticePlan())) {
		@components.BreadcrumbContainer() {
			@components.BreadcrumbWithDates([]components.BreadcrumbWithDatesInfo{
					{ Label: "Library", Href: "/library", Active: false, IsDate: false },
					{ Label: "Practice Plans", Href: "/library/plans", Active: false, IsDate: false },
					{ Label: strconv.FormatInt(planData.Date, 10), Href: "/library/plans/"+planData.ID, Active: true, IsDate: true },
				})
			@components.ActionButtonContainer() {
				@PracticePlanActions(planData, csrf)
			}
		}
		@components.NormalContainer() {
			<div
 				class={
					"flex flex-col flex-grow gap-0 p-0 min-h-full text-black bg-white rounded-lg border-2 shadow shadow-violet-400",
					templ.KV("border-violet-700", planData.IsActive),
					templ.KV("border-transparent", !planData.IsActive),
				}
			>
				@singlePlanContent(planData, csrf)
			</div>
		}
	}
	<script type="module" src={ s.StaticUrl("dist/practice-plan.js") }></script>
}

templ PracticePlanActions(planData PracticePlanData, csrf string) {
	if canResume(planData) {
		<button
 			class="text-violet-800 action-button bg-violet-700/10 hover:bg-violet-700/20 focusable"
 			hx-post={ "/library/plans/" + planData.ID + "/resume" }
 			hx-headers={ components.HxCsrfHeader(csrf) }
 			hx-target="#main-content"
 			hx-swap="outerHTML transition:true"
		>
			<span class="-ml-1 size-6 icon-[custom--music-file-curly-pencil]"></span>
			Resume Practicing
		</button>
	}
	if planData.IsActive {
		@components.HxLink("focusable action-button text-amber-800 bg-amber-700/10 hover:bg-amber-700/20","/library/plans/" + planData.ID + "/edit", "#main-content") {
			<span class="-ml-1 size-6 icon-[iconamoon--edit-thin]" aria-hidden="true"></span>
			Customize
		}
		if planData.CompletedItems == planData.TotalItems {
			<button
 				class="text-green-800 action-button bg-green-700/10 hover:bg-green-700/20 focusable"
 				hx-post={ "/library/plans/" + planData.ID + "/stop" }
 				hx-headers={ components.HxCsrfHeader(csrf) }
 				hx-target="#main-content"
 				hx-swap="outerHTML transition:true"
			>
				<span class="-ml-1 size-6 icon-[iconamoon--check-circle-1-thin]" aria-hidden="true"></span>
				Finish Practicing
			</button>
		} else {
			<button
 				class="text-red-800 action-button bg-red-700/10 hover:bg-red-700/20 focusable"
 				hx-post={ "/library/plans/" + planData.ID + "/stop" }
 				hx-headers={ components.HxCsrfHeader(csrf) }
 				hx-target="#main-content"
 				hx-swap="outerHTML transition:true"
			>
				<span class="-ml-1 size-6 icon-[iconamoon--player-stop-thin]" aria-hidden="true"></span>
				Stop Practicing
			</button>
		}
	} else {
		<button
 			class="text-green-800 action-button bg-green-700/10 hover:bg-green-700/20 focusable"
 			hx-post={ "/library/plans/" + planData.ID + "/duplicate" }
 			hx-headers={ components.HxCsrfHeader(csrf) }
 			hx-target="#main-content"
 			hx-swap="outerHTML transition:true"
		>
			<span class="-ml-1 size-6 icon-[iconamoon--copy-thin]" aria-hidden="true"></span>
			Duplicate
		</button>
		<button
 			class="text-red-800 action-button bg-red-700/10 hover:bg-red-700/20 focusable"
 			hx-delete={ "/library/plans/" + planData.ID }
 			hx-headers={ components.HxCsrfHeader(csrf) }
 			hx-confirm="Are you sure you want to delete this practice plan?"
 			hx-target="#main-content"
 			hx-swap="outerHTML transition:true"
		>
			<span class="-ml-1 size-6 icon-[iconamoon--trash-thin]" aria-hidden="true"></span>
			Delete Plan
		</button>
	}
}

templ singlePlanContent(planData PracticePlanData, csrf string) {
	<div class="grid grid-cols-1 gap-4 p-4 w-full sm:grid-cols-2 lg:grid-cols-3">
		<header class="flex flex-col col-span-full justify-center items-center pb-2 w-full">
			<div class="px-4 pt-2 text-center sm:px-8">
				<h2 class="text-xl font-bold text-center sm:text-3xl">
					<pretty-date class="text-black" epoch={ strconv.FormatInt(planData.Date, 10) }></pretty-date>
				</h2>
			</div>
			<div class="px-8 w-full xs:mx-auto xs:max-w-xl">
				<label id="progress-label" class="sr-only">Plan Progress</label>
				<progress
 					id="plan-progress-bar"
 					value={ strconv.Itoa(planData.CompletedItems) }
 					max={ strconv.Itoa(planData.TotalItems) }
 					class="m-0 w-full progress-rounded progress-violet-600 progress-bg-violet-200"
 					aria-labelledby="progress-label"
				>{ strconv.Itoa(planData.CompletedItems) }/{ strconv.Itoa(planData.TotalItems) }</progress>
			</div>
			if planData.IsActive {
				<p class="py-2 text-base">Click the items below start practicing.</p>
			}
		</header>
		if len(planData.InterleaveDaysSpots) > 0 {
			@PracticePlanInterleaveDaysSpots(planData.InterleaveDaysSpots, planData.ID, csrf, planData.InterleaveDaysSpotsCompleted, planData.IsActive)
		}
		if len(planData.ExtraRepeatSpots) > 0 {
			@PracticePlanExtraRepeatSpots(planData.ExtraRepeatSpots, planData.ID, csrf)
		}
		if len(planData.InterleaveSpots) > 0 {
			@PracticePlanInterleaveSpots(planData.InterleaveSpots, planData.ID, csrf, planData.InterleaveSpotsCompleted, planData.IsActive, true)
		}
		if len(planData.RandomSpotsPieces) > 0 {
			<section id="random-spots-pieces" class="flex flex-col gap-2">
				<h3 class="px-2 pb-1 text-xl font-semibold text-center border-b-2 border-black">Random Practice Pieces</h3>
				<p class="w-full text-sm">Random Practice the spots from these pieces.</p>
				<ul id="random-piece-list" class="flex flex-col gap-2 w-full list-none">
					for _, piece := range planData.RandomSpotsPieces {
						@components.PracticePlanPieceCard(piece.ID, piece.Title, piece.Composer, piece.RandomSpots, piece.Completed, "random_spots", planData.Intensity, planData.IsActive)
					}
				</ul>
			</section>
		}
		if len(planData.RandomStartPieces) > 0 {
			<section id="starting-point-pieces" class="flex flex-col gap-2">
				<h3 class="px-2 pb-1 text-xl font-semibold text-center border-b-2 border-black">Random Starting Point Pieces</h3>
				<p class="w-full text-sm">Practice these pieces using the random starting points.</p>
				<ul id="starting-point-piece-list" class="flex flex-col gap-2 w-full list-none">
					for _, piece := range planData.RandomStartPieces {
						@components.PracticePlanPieceCard(piece.ID, piece.Title, piece.Composer, 0, piece.Completed, "starting_point", planData.Intensity, planData.IsActive)
					}
				</ul>
			</section>
		}
		if len(planData.NewSpots) > 0 {
			<section id="new-spots" class="flex flex-col gap-2">
				<h3 class="px-2 pb-1 text-xl font-semibold text-center border-b-2 border-black">New Spots</h3>
				<p class="w-full text-sm">Get started on some new spots. Donâ€™t feel like you need to get to all of them</p>
				<ul id="new-spot-list" class="flex flex-col gap-2 w-full list-none">
					for _, spot := range planData.NewSpots {
						@components.PracticePlanSpotCard(spot.PieceID, spot.ID, spot.Name, spot.Measures, "repeat", spot.PieceTitle, spot.Completed)
					}
				</ul>
			</section>
		}
	</div>
}
