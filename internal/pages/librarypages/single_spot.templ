package librarypages

import "practicebetter/internal/components"
import "practicebetter/internal/db"
import "strconv"
import "practicebetter/internal/pages"

const stageModalID = "stage-read-more-modal"

templ StageReadMoreDialog() {
	<dialog id={ stageModalID } aria-labelledby={ stageModalID + "-title" } class="bg-gradient-to-t from-neutral-50 to-[#fff9ee] text-left flex flex-col gap-2 sm:max-w-xl px-4 py-4">
		<header class="mt-2 text-center sm:text-left">
			<h3 id={ stageModalID + "-title" } class="text-2xl font-semibold leading-6 text-neutral-900">About Practice Stages</h3>
		</header>
		<div class="mt-2 text-left prose prose-sm prose-neutral">
			<p class="text-base">
				There are five practice stages that I’ve accounted for
			</p>
			<ul class="text-base">
				<li>
					<strong class="font-semibold">
						Repeat Practice
					</strong>{ " " }
					is the default for all new spots. Once you complete
					repeat practicing, the spot will be advanced to
				</li>
				<li>
					<strong class="font-semibold">
						Random Practice
					</strong>{ " " }
					is for solidifying a spot that you have corretly.
					This can be practiced randomly with other spots from
					the piece or even other pieces for much better
					retention than massed practicing.
				</li>
				<li>
					For{ " " }
					<strong class="font-semibold">
						Interleaved Practice
					</strong>{ " " }
					you should spread your repetitions out even more, 5+
					minutes between repetitions. This challenges your
					spots even more. Try to play them correctly the
					first time and only once.
				</li>
				<li>
					Once your spots are in excellent shape on their own,
					you can start{ " " }
					<strong class="font-semibold">
						Interleaved Days Practicing
					</strong>{ " " }
					which is the same principle, but you don’t play the
					spots every day.
				</li>
				<li>
					Mark a spot as{ " " }
					<strong class="font-semibold">
						{ " " }
						Completed
					</strong>{ " " }
					once it is in execellent shape and you basically
					never play it wrong. At this point, you should start
					combining it with the spots around it, either by
					simply playing a few spots in order, or create some
					new overlapping spots for better continuity.
				</li>
			</ul>
		</div>
		<button
 			onclick={ components.CloseModal(stageModalID) }
 			class="action-button amber focusable"
 			type="button"
		>
			<span class="-ml-1 size-6 icon-[iconamoon--sign-times-circle-thin]" aria-hidden="true"></span>
			Done Reading
		</button>
	</dialog>
}

templ SingleSpot(s pages.ServerUtil, spot db.GetSpotRow, csrf string) {
	<title>{ spot.Name } - { spot.PieceTitle } | Go Practice</title>
	@components.SingleColumnLayout(components.TwoButtonBar(components.InternalNav(), components.HeadingText(spot.Name + " - " + spot.PieceTitle) , components.MaybePracticePlan())) {
		@components.BreadcrumbContainer() {
			@components.Breadcrumb([]components.BreadcrumbInfo{
					{ Label: "Library", Href: "/library", Active: false },
					{ Label: "Pieces", Href: "/library/pieces", Active: false },
					{ Label: spot.PieceTitle, Href: "/library/pieces/"+spot.PieceID, Active: false },
					{ Label: "Spots", Href: "/library/pieces/"+spot.PieceID+"/spots", Active: false },
					{ Label: spot.Name, Href: "/library/pieces/"+spot.PieceID+"/spots/"+spot.ID, Active: true },
				})
			@components.ActionButtonContainer() {
				<back-to-piece pieceid={ spot.PieceID }></back-to-piece>
				@components.HxLink("focusable action-button violet", "/library/pieces/" + spot.PieceID + "/spots/" + spot.ID + "/practice/repeat", "#main-content") {
					<span class="-ml-1 text-violet-800 size-5 icon-[iconamoon--playlist-repeat-list-thin]" aria-hidden="true"></span>
					Practice
				}
				@components.HxLink( "focusable action-button amber", "/library/pieces/" + spot.PieceID + "/spots/" + spot.ID + "/edit", "#main-content") {
					<span class="-ml-1 size-5 icon-[iconamoon--edit-thin]" aria-hidden="true"></span>
					Edit
				}
				<button
 					class="action-button red focusable"
 					hx-delete={ "/library/pieces/" + spot.PieceID + "/spots/" + spot.ID }
 					hx-headers={ components.HxCsrfHeader(csrf) }
 					hx-confirm={ "Are you sure you want to delete spot " + spot.Name + "? This cannot be reversed" }
 					hx-target="#main-content"
				>
					<span class="-ml-1 size-5 icon-[iconamoon--trash-thin]" aria-hidden="true"></span>
					Delete Spot
				</button>
			}
		}
		@components.NarrowContainer() {
			<div class="grid grid-cols-1 gap-4 p-4 w-full bg-white rounded-xl border shadow-sm sm:grid-cols-5 border-neutral-500 shadow-black/20 text-neutral-900">
				<div class="flex col-span-full justify-center text-center">
					<h2 class="px-4 text-2xl font-bold border-b-2 border-neutral-500">
						{ spot.Name }
					</h2>
				</div>
				<div class="sm:col-span-2">
					@SpotAboutSection(spot)
				</div>
				<div class="flex flex-col gap-2 sm:col-span-3">
					@RemindersSummary(spot.TextPrompt, spot.PieceID, spot.ID)
					<audio-prompt-summary url={ spot.AudioPromptUrl }></audio-prompt-summary>
					<notes-prompt-summary notes={ spot.NotesPrompt }></notes-prompt-summary>
					<image-prompt-summary url={ spot.ImagePromptUrl }></image-prompt-summary>
				</div>
			</div>
		}
		@StageReadMoreDialog()
		<script type="module" src={ s.StaticUrl("dist/prompts.js") }></script>
	}
}

templ SpotAboutSection(spot db.GetSpotRow) {
	<dl class="text-base divide-y divide-neutral-700 border-y border-neutral-700">
		<div class="py-2 px-4 sm:flex sm:gap-2 sm:justify-between sm:px-0">
			<dt class="font-medium leading-6 text-neutral-900">
				Measures
			</dt>
			<dd class="mt-1 leading-6 sm:mt-0 text-neutral-700">
				if spot.Measures.Valid {
					{ spot.Measures.String }
				}
			</dd>
		</div>
		<div class="py-2 px-4 sm:flex sm:gap-2 sm:justify-between sm:px-0">
			<dt class="font-medium leading-6 text-neutral-900">
				Current Tempo
			</dt>
			<dd class="mt-1 leading-6 sm:mt-0 text-neutral-700">
				if spot.CurrentTempo.Valid {
					{ strconv.FormatInt(spot.CurrentTempo.Int64, 10)  }
				}
			</dd>
		</div>
		<div class="py-2 px-4 sm:flex sm:gap-2 sm:justify-between sm:px-0">
			<dt class="font-medium leading-6 text-neutral-900">
				Last Practiced
			</dt>
			<dd class="mt-1 leading-6 sm:mt-0 text-neutral-700">
				if spot.LastPracticed.Valid {
					<date-from-now epoch={ strconv.FormatInt(spot.LastPracticed.Int64, 10) }></date-from-now>
				} else {
					Not Practiced
				}
			</dd>
		</div>
		<div class="py-2 px-4 sm:flex sm:gap-2 sm:justify-between sm:px-0">
			<dt class="font-medium leading-6 text-neutral-900">
				Stage
			</dt>
			<dd class="flex gap-1 items-center mt-1 leading-6 sm:mt-0 text-neutral-700">
				<span class="font-medium"><spot-stage icon="true" stage={ spot.Stage }></spot-stage></span>
				<button class="flex items-center p-1 rounded-full text-neutral-600 hover:text-neutral-700 hover:bg-neutral-200" onClick={ components.ShowModal(stageModalID) }>
					<span class="size-4 icon-[iconamoon--information-circle-thin]" aria-hidden="true"></span>
					<span class="sr-only">Read More</span>
				</button>
			</dd>
		</div>
	</dl>
}

templ RemindersSummary(text, pieceid, spotid string) {
	<reminders-summary text={ text } pieceid={ pieceid } spotid={ spotid } id={ "reminders-" + pieceid + "-" + spotid }></reminders-summary>
}

templ EditRemindersSummary(text, pieceid, spotid, csrf, err string) {
	<edit-reminders-summary text={ text } pieceid={ pieceid } spotid={ spotid } id={ "reminders-" + pieceid + "-" + spotid } csrf={ csrf } error={ err }></edit-reminders-summary>
}
