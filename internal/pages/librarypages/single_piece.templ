package librarypages

import "practicebetter/internal/db"
import "practicebetter/internal/components"
import "practicebetter/internal/pages"
import "strconv"
import "database/sql"

type PieceSpotsBreakdown struct {
	Repeat      int
	ExtraRepeat int
	Random      int
	Interleave  int
	Infrequent  int
	Completed   int
}

type PiecePageSpot struct {
	ID       string
	Name     string
	Measures string
	Stage    string
}

type SinglePieceInfo struct {
	ID              string
	Title           string
	Composer        sql.NullString
	Measures        sql.NullInt64
	BeatsPerMeasure sql.NullInt64
	GoalTempo       sql.NullInt64
	LastPracticed   sql.NullInt64
	Stage           string
	SpotBreakdown   PieceSpotsBreakdown
	Spots           []PiecePageSpot
}

templ SinglePiece(s pages.ServerUtil, piece SinglePieceInfo, csrf string) {
	<title>{ piece.Title } | Practice Better</title>
	@components.SingleColumnLayout(components.TwoButtonBar(components.InternalNav(), components.HeadingText(piece.Title) , components.MaybePracticePlan())) {
		@components.BreadcrumbContainer() {
			@components.Breadcrumb([]components.BreadcrumbInfo{
					{ Label: "Library", Href: "/library", Active: false },
					{ Label: "Pieces", Href: "/library/pieces", Active: false },
					{ Label: piece.Title, Href: "/library/pieces/" + piece.ID, Active: true },
				})
			@components.ActionButtonContainer() {
				@components.HxLink("focusable action-button amber", "/library/pieces/" + piece.ID + "/edit", "#main-content") {
					<span class="-ml-1 size-6 icon-[custom--music-note-edit]" aria-hidden="true"></span>
					Edit
				}
				<practice-menu pieceid={ piece.ID } class="h-12 min-w-[7.25rem]"></practice-menu>
				<button
 					class="action-button red focusable"
 					hx-delete={ "/library/pieces/" + piece.ID }
 					hx-headers={ components.HxCsrfHeader(csrf) }
 					hx-confirm="Are you sure you want to delete this piece and all its spots?"
 					hx-target="#main-content"
				>
					<span class="-ml-1 size-6 icon-[iconamoon--trash-thin]" aria-hidden="true"></span>
					Delete Piece
				</button>
			}
		}
		@components.TwoColumnContainer() {
			<div class="flex flex-col">
				<div class="p-4 rounded-xl shadow-sm bg-neutral-50 shadow-black/20">
					<div class="flex flex-col">
						<h2 class="py-1 text-2xl font-bold text-center">
							About this Piece
						</h2>
					</div>
					<dl class="border-t divide-y divide-neutral-700 border-neutral-700">
						<div class="py-4 px-4 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-0">
							<dt class="text-sm font-medium leading-6 text-neutral-900">
								Title
							</dt>
							<dd class="mt-1 text-sm leading-6 sm:col-span-2 sm:mt-0 text-neutral-700">
								{ piece.Title }
							</dd>
						</div>
						if piece.Composer.Valid {
							<div class="py-4 px-4 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-0">
								<dt class="text-sm font-medium leading-6 text-neutral-900">
									Composer
								</dt>
								<dd class="mt-1 text-sm leading-6 sm:col-span-2 sm:mt-0 text-neutral-700">
									{ piece.Composer.String }
								</dd>
							</div>
						}
						if piece.Measures.Valid {
							<div class="py-4 px-4 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-0">
								<dt class="text-sm font-medium leading-6 text-neutral-900">
									Measures
								</dt>
								<dd class="mt-1 text-sm leading-6 sm:col-span-2 sm:mt-0 text-neutral-700">
									{ strconv.FormatInt(piece.Measures.Int64, 10) }
								</dd>
							</div>
						}
						if piece.BeatsPerMeasure.Valid {
							<div class="py-4 px-4 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-0">
								<dt class="text-sm font-medium leading-6 text-neutral-900">
									Beats per Measure
								</dt>
								<dd class="mt-1 text-sm leading-6 sm:col-span-2 sm:mt-0 text-neutral-700">
									{ strconv.FormatInt(piece.BeatsPerMeasure.Int64, 10) }
								</dd>
							</div>
						}
						if piece.GoalTempo.Valid {
							<div class="py-4 px-4 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-0">
								<dt class="text-sm font-medium leading-6 text-neutral-900">
									Goal Tempo
								</dt>
								<dd class="mt-1 text-sm leading-6 sm:col-span-2 sm:mt-0 text-neutral-700">
									{ strconv.FormatInt(piece.GoalTempo.Int64, 10) }
								</dd>
							</div>
						}
						<div class="py-4 px-4 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-0">
							<dt class="text-sm font-medium leading-6 text-neutral-900">
								Last Practiced
							</dt>
							<dd class="mt-1 text-sm leading-6 sm:col-span-2 sm:mt-0 text-neutral-700">
								if piece.LastPracticed.Valid {
									<date-from-now epoch={ strconv.FormatInt(piece.LastPracticed.Int64, 10) }></date-from-now>
								} else {
									Never
								}
							</dd>
						</div>
						<div class="py-4 px-4 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-0">
							<dt class="text-sm font-medium leading-6 text-neutral-900">
								Stage
							</dt>
							<dd class="mt-1 text-sm leading-6 sm:col-span-2 sm:mt-0 text-neutral-700">
								<piece-stage stage={ piece.Stage }></piece-stage>
							</dd>
						</div>
					</dl>
				</div>
				<spot-breakdown
 					class="my-2"
 					repeat={ strconv.Itoa(piece.SpotBreakdown.Repeat) }
 					extrarepeat={ strconv.Itoa(piece.SpotBreakdown.ExtraRepeat) }
 					random={ strconv.Itoa(piece.SpotBreakdown.Random) }
 					interleave={ strconv.Itoa(piece.SpotBreakdown.Interleave) }
 					infrequent={ strconv.Itoa(piece.SpotBreakdown.Infrequent) }
 					completed={ strconv.Itoa(piece.SpotBreakdown.Completed) }
				></spot-breakdown>
			</div>
			<div class="p-4 rounded-xl bg-neutral-700/5">
				<div class="flex flex-wrap justify-between px-0.5 pb-2">
					<h2 class="py-1 text-2xl font-bold text-center">
						Spots
						<span id="spot-count">
							({ strconv.Itoa(len(piece.Spots)) })
						</span>
					</h2>
					<div class="flex flex-wrap flex-grow gap-2 justify-end">
						@components.HxLink("action-button orange focusable", "/library/pieces/"+piece.ID+"/spots", "#main-content") {
							<span class="-ml-1 size-6 icon-[ph--circles-four-thin]" aria-hidden="true"></span>
							Show Spots
						}
						@components.HxLink("action-button green focusable", "/library/pieces/"+piece.ID+"/spots/add", "#main-content") {
							<span class="-ml-1 size-6 icon-[ph--circles-three-plus-thin]" aria-hidden="true"></span>
							Add Spots
						}
					</div>
				</div>
				<ul class="grid grid-cols-1 gap-4 list-none md:grid-cols-2">
					for _, spot := range piece.Spots {
						@components.SmallSpotCard(piece.ID, spot.ID, spot.Name, spot.Measures, spot.Stage)
					}
				</ul>
			</div>
		}
		<script type="module" src={ s.StaticUrl("dist/practice-menu.js") }></script>
		<script type="module" src={ s.StaticUrl("dist/spot-breakdown.js") }></script>
	}
}

func getNumSpots(piece []db.GetPieceByIDRow) int {
	if len(piece) > 1 {
		return len(piece)
	} else if piece[0].SpotID.Valid {
		return 1
	} else {
		return 0
	}
}
