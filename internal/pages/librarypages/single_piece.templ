package librarypages

import "practicebetter/internal/db"
import "practicebetter/internal/components"
import "practicebetter/internal/heroicons"
import "practicebetter/internal/pages"
import "strconv"

templ SinglePiece(s pages.ServerUtil, csrf string, piece []db.GetPieceByIDRow) {
	<title>{ piece[0].Title } | Practice Better</title>
	@components.SingleColumnLayout(components.TwoButtonBar(components.LibraryLink(), components.HeadingText(piece[0].Title) , components.AccountLink())) {
		<div class="flex flex-col flex-wrap gap-2 py-8 px-4 w-full sm:flex-row md:gap-4 md:justify-between md:items-center md:mx-auto md:max-w-5xl">
			@components.Breadcrumb([]components.BreadcrumbInfo{
					{ Label: "Library", Href: "/library", Active: false },
					{ Label: "Pieces", Href: "/library/pieces", Active: false },
					{ Label: piece[0].Title, Href: "/library/pieces/" + piece[0].ID, Active: true },
				})
			<div class="flex flex-grow gap-2 justify-end items-center">
				@components.HxLink("focusable h-10 flex items-center justify-center gap-1 rounded-xl bg-amber-700/10 px-4 py-2 font-semibold  text-amber-800 transition duration-200 hover:bg-amber-700/20", "/library/pieces/" + piece[0].ID + "/edit", "#main-content") {
					@heroicons.IconPencilSolid("-ml-1 h-5 w-5")
					Edit
				}
				<practice-menu pieceid={ piece[0].ID }></practice-menu>
				<button
 					class="flex gap-1 justify-center items-center py-2 px-4 h-10 font-semibold text-red-800 rounded-xl transition duration-200 bg-red-700/10 hover:bg-red-700/20 focusable"
 					hx-delete={ "/library/pieces/" + piece[0].ID }
 					hx-headers={ components.HxCsrfHeader(csrf) }
 					hx-confirm="Are you sure you want to delete this piece and all its spots?"
 					hx-target="#main-content"
				>
					@heroicons.IconTrashSolid("-ml-1 h-5 w-5")
					Delete Piece
				</button>
			</div>
		</div>
		@components.TwoColumnContainer() {
			<div class="p-4 rounded-xl bg-neutral-700/5">
				<div class="flex flex-col">
					<h2 class="py-1 text-2xl font-bold text-center">
						About this Piece
					</h2>
				</div>
				<dl class="border-t divide-y divide-neutral-700 border-neutral-700">
					<div class="py-4 px-4 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-0">
						<dt class="text-sm font-medium leading-6 text-neutral-900">
							Title
						</dt>
						<dd class="mt-1 text-sm leading-6 sm:col-span-2 sm:mt-0 text-neutral-700">
							{ piece[0].Title }
						</dd>
					</div>
					if piece[0].Composer.Valid {
						<div class="py-4 px-4 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-0">
							<dt class="text-sm font-medium leading-6 text-neutral-900">
								Composer
							</dt>
							<dd class="mt-1 text-sm leading-6 sm:col-span-2 sm:mt-0 text-neutral-700">
								{ piece[0].Composer.String }
							</dd>
						</div>
					}
					if piece[0].Description.Valid && len(piece[0].Description.String) > 0 {
						<div class="py-4 px-4 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-0">
							<dt class="text-sm font-medium leading-6 text-neutral-900">
								Description
							</dt>
							<dd class="mt-1 text-sm leading-6 sm:col-span-2 sm:mt-0 text-neutral-700">
								{ piece[0].Description.String }
							</dd>
						</div>
					}
					if piece[0].Measures.Valid {
						<div class="py-4 px-4 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-0">
							<dt class="text-sm font-medium leading-6 text-neutral-900">
								Measures
							</dt>
							<dd class="mt-1 text-sm leading-6 sm:col-span-2 sm:mt-0 text-neutral-700">
								{ strconv.FormatInt(piece[0].Measures.Int64, 10) }
							</dd>
						</div>
					}
					if piece[0].BeatsPerMeasure.Valid {
						<div class="py-4 px-4 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-0">
							<dt class="text-sm font-medium leading-6 text-neutral-900">
								Beats per Measure
							</dt>
							<dd class="mt-1 text-sm leading-6 sm:col-span-2 sm:mt-0 text-neutral-700">
								{ strconv.FormatInt(piece[0].BeatsPerMeasure.Int64, 10) }
							</dd>
						</div>
					}
					if piece[0].GoalTempo.Valid {
						<div class="py-4 px-4 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-0">
							<dt class="text-sm font-medium leading-6 text-neutral-900">
								Goal Tempo
							</dt>
							<dd class="mt-1 text-sm leading-6 sm:col-span-2 sm:mt-0 text-neutral-700">
								{ strconv.FormatInt(piece[0].GoalTempo.Int64, 10) }
							</dd>
						</div>
					}
				</dl>
			</div>
			<div class="p-4 rounded-xl bg-neutral-700/5">
				<div class="flex flex-col">
					<h2 class="py-1 text-2xl font-bold text-center">Spots</h2>
				</div>
				<ul class="grid grid-cols-1 gap-4 list-none sm:grid-cols-2">
					for _, row := range piece {
						if row.SpotID.Valid {
							@components.SmallSpotCard(row.ID, row.SpotID.String, row.SpotName.String, SpotMeasuresOrEmpty(row.SpotMeasures), row.SpotStage.String)
						}
					}
					<li>
						@components.HxLink("focusable flex h-full items-center justify-between rounded-xl border border-dashed border-neutral-500 bg-white/50 px-4 py-6 text-neutral-700 hover:bg-white/90 hover:text-black", "/library/pieces/"+piece[0].ID+"/spots", "#main-content") {
							<div class="flex flex-col flex-grow justify-center items-center h-full">
								<h3 class="text-lg font-bold">Add Spot</h3>
							</div>
							@heroicons.IconArrowTopRightOnSquareSolid("h-6 w-6")
							<span class="sr-only">Click to create spot</span>
						}
					</li>
				</ul>
			</div>
		}
		<script type="module" src={ s.StaticUrl("out/practice-menu.js") }></script>
	}
}
