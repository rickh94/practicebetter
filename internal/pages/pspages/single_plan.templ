package pspages

import "practicebetter/internal/components"
import "strconv"
import "practicebetter/internal/heroicons"
import "time"

script changeSelectedQuality(id, value string) {
	for (const el of document.querySelectorAll(`#quality-${id} .quality-option`)) {
		if (el.id === `${id}.quality.${value}-label`) {
			el.classList.add('checked');
		} else {
			el.classList.remove('checked');
		}
	}
}

type PracticePlanSpot struct {
	ID               string
	Name             string
	Measures         string
	PieceTitle       string
	PieceID          string
	Completed        bool
	SkipDays         int64
	DaysSinceStarted int64
}

type PracticePlanPiece struct {
	ID             string
	Title          string
	Completed      bool
	Composer       string
	ActiveSpots    int64
	CompletedSpots int64
	RandomSpots    int64
}

type PracticePlanData struct {
	ID                           string
	IsActive                     bool
	Date                         int64
	InterleaveDaysSpots          []PracticePlanSpot
	InterleaveDaysSpotsCompleted bool
	ExtraRepeatSpots             []PracticePlanSpot
	InterleaveSpots              []PracticePlanSpot
	InterleaveSpotsCompleted     bool
	RandomSpotsPieces            []PracticePlanPiece
	RandomStartPieces            []PracticePlanPiece
	NewSpots                     []PracticePlanSpot
	Completed                    bool
	CompletedItems               int
	TotalItems                   int
	Intensity                    string
}

// TODO: create interleave/interleave days practice page for a spot
// TODO: create variants of all the cards that swap the link icon for a check and disable or change color
// TODO: add piece title to spot card

func canResume(planData PracticePlanData) bool {
	if planData.IsActive {
		return false
	}
	if time.Since(time.Unix(planData.Date, 0)) > 5*time.Hour {
		return false
	}
	if !planData.InterleaveDaysSpotsCompleted {
		return true
	}
	for _, spot := range planData.ExtraRepeatSpots {
		if !spot.Completed {
			return true
		}
	}
	if !planData.InterleaveSpotsCompleted {
		return true
	}
	for _, piece := range planData.RandomSpotsPieces {
		if !piece.Completed {
			return true
		}
	}
	for _, piece := range planData.RandomStartPieces {
		if !piece.Completed {
			return true
		}
	}
	for _, spot := range planData.NewSpots {
		if !spot.Completed {
			return true
		}
	}
	return false
}

templ PracticePlanPage(planData PracticePlanData, csrf string) {
	<title>Practice Plan | Practice Better</title>
	@components.SingleColumnLayout(components.TwoButtonBar(components.InternalNav(), components.HeadingText("Practice Plan") , components.AccountLink())) {
		@components.BreadcrumbContainer() {
			@components.BreadcrumbWithDates([]components.BreadcrumbWithDatesInfo{
					{ Label: "Library", Href: "/library", Active: false, IsDate: false },
					{ Label: "Practice Plans", Href: "/library/plans", Active: false, IsDate: false },
					{ Label: strconv.FormatInt(planData.Date, 10), Href: "/library/plans/"+planData.ID, Active: true, IsDate: true },
				})
			@components.ActionButtonContainer() {
				if canResume(planData) {
					<button
 						class="text-violet-800 action-button bg-violet-700/10 hover:bg-violet-700/20 focusable"
 						hx-post={ "/library/plans/" + planData.ID + "/resume" }
 						hx-headers={ components.HxCsrfHeader(csrf) }
 						hx-target="#main-content"
 						hx-swap="outerHTML transition:true"
					>
						@heroicons.IconClipboardDocumentCheckSolid("-ml-1 size-5")
						Resume Practicing
					</button>
				}
				if planData.IsActive {
					<button
 						class="text-red-800 action-button bg-red-700/10 hover:bg-red-700/20 focusable"
 						hx-post={ "/library/plans/" + planData.ID + "/stop" }
 						hx-headers={ components.HxCsrfHeader(csrf) }
 						hx-target="#main-content"
 						hx-swap="outerHTML transition:true"
					>
						@heroicons.IconStopCircleSolid("-ml-1 size-5")
						Stop Practicing
					</button>
				} else {
					<button
 						class="text-red-800 action-button bg-red-700/10 hover:bg-red-700/20 focusable"
 						hx-delete={ "/library/plans/" + planData.ID }
 						hx-headers={ components.HxCsrfHeader(csrf) }
 						hx-confirm="Are you sure you want to delete this practice plan?"
 						hx-target="#main-content"
 						hx-swap="outerHTML transition:true"
					>
						@heroicons.IconTrashSolid("-ml-1 size-5")
						Delete Plan
					</button>
				}
			}
		}
		@components.NormalContainer() {
			<div class="flex flex-col flex-grow gap-0 p-0 min-h-full text-black bg-white rounded shadow shadow-black/20">
				<label id="progress-label" class="sr-only">Plan Progress</label>
				<progress value={ strconv.Itoa(planData.CompletedItems) } max={ strconv.Itoa(planData.TotalItems) } class="pb-2 m-0 w-full progress-rounded progress-violet-600 progress-bg-white" aria-labelledby="progress-label">{ strconv.Itoa(planData.CompletedItems) }/{ strconv.Itoa(planData.TotalItems) }</progress>
				<div class="grid grid-cols-1 gap-4 p-4 w-full sm:grid-cols-2 lg:grid-cols-3">
					<header class="flex flex-col col-span-full justify-center items-center pb-4 w-full">
						<div class="py-2 px-4 text-center border-b-2 border-black sm:px-8">
							<h2 class="text-xl font-bold text-center sm:text-3xl">
								<pretty-date class="text-black" epoch={ strconv.FormatInt(planData.Date, 10) }></pretty-date>
								if planData.IsActive {
									<span class="text-violet-700">- Active</span>
								}
							</h2>
						</div>
						if planData.IsActive {
							<p class="text-base">Click the items below start practicing.</p>
							<p class="italic">You can return to this page at any time using the menu in the top left.</p>
						}
					</header>
					if len(planData.InterleaveDaysSpots) > 0 {
						@PracticePlanInterleaveDaysSpots(planData.InterleaveDaysSpots, planData.ID, csrf, planData.InterleaveDaysSpotsCompleted, planData.IsActive)
					}
					if len(planData.ExtraRepeatSpots) > 0 {
						<section id="extra-repeat-spots" class="flex flex-col gap-2">
							<h3 class="px-2 pb-1 text-xl font-semibold text-center border-b-2 border-black">Extra Repeat Practice Spots</h3>
							<p class="w-full text-sm">Repeat Practice these spots today</p>
							<ul id="interleave-spot-list" class="flex flex-col gap-2 w-full list-none">
								for _, spot := range planData.ExtraRepeatSpots {
									@components.PracticePlanSpotCard(spot.PieceID, spot.ID, spot.Name, spot.Measures, "extra_repeat", spot.PieceTitle, spot.Completed)
								}
							</ul>
						</section>
					}
					if len(planData.InterleaveSpots) > 0 {
						@PracticePlanInterleaveSpots(planData.InterleaveSpots, planData.ID, csrf, planData.InterleaveSpotsCompleted, planData.IsActive, true)
					}
					if len(planData.RandomSpotsPieces) > 0 {
						<section id="random-spots-pieces" class="flex flex-col gap-2">
							<h3 class="px-2 pb-1 text-xl font-semibold text-center border-b-2 border-black">Random Practice Pieces</h3>
							<p class="w-full text-sm">Random Practice the spots from these pieces.</p>
							<ul id="interleave-spot-list" class="flex flex-col gap-2 w-full list-none">
								for _, piece := range planData.RandomSpotsPieces {
									@components.PracticePlanPieceCard(piece.ID, piece.Title, piece.Composer, piece.RandomSpots, piece.Completed, "random_single", planData.Intensity, planData.IsActive)
								}
							</ul>
						</section>
					}
					if len(planData.RandomStartPieces) > 0 {
						<section id="starting-point-pieces" class="flex flex-col gap-2">
							<h3 class="px-2 pb-1 text-xl font-semibold text-center border-b-2 border-black">Random Starting Point Pieces</h3>
							<p class="w-full text-sm">Practice these pieces using the random starting points.</p>
							<ul id="interleave-spot-list" class="flex flex-col gap-2 w-full list-none">
								for _, piece := range planData.RandomStartPieces {
									@components.PracticePlanPieceCard(piece.ID, piece.Title, piece.Composer, 0, piece.Completed, "starting_point", planData.Intensity, planData.IsActive)
								}
							</ul>
						</section>
					}
					if len(planData.NewSpots) > 0 {
						<section id="new-spots" class="flex flex-col gap-2">
							<h3 class="px-2 pb-1 text-xl font-semibold text-center border-b-2 border-black">New Spots</h3>
							<p class="w-full text-sm">Get started on some new spots. Don’t feel like you need to get to all of them</p>
							<ul id="interleave-spot-list" class="flex flex-col gap-2 w-full list-none">
								for _, spot := range planData.NewSpots {
									@components.PracticePlanSpotCard(spot.PieceID, spot.ID, spot.Name, spot.Measures, "repeat", spot.PieceTitle, spot.Completed)
								}
							</ul>
						</section>
					}
				</div>
			</div>
		}
	}
}

templ PracticePlanInterleaveDaysSpots(interleaveDaysSpots []PracticePlanSpot, planID string, csrf string, allCompleted bool, active bool) {
	<section id="interleave-days-spots" class="flex flex-col gap-2">
		<h3 class="px-2 pb-1 text-xl font-semibold text-center border-b-2 border-black">Infrequent Spots</h3>
		<p class="w-full text-sm">Play these spots at least once today</p>
		if len(interleaveDaysSpots) > 0 {
			<ul id="interleave-spot-list" class="flex flex-col gap-2 w-full list-none">
				for _, spot := range interleaveDaysSpots {
					@components.PracticePlanSpotCard(spot.PieceID, spot.ID, spot.Name, spot.Measures, "interleave_days", spot.PieceTitle, spot.Completed)
				}
			</ul>
		} else {
			<p class="w-full text-sm">No Infrequent Spots</p>
		}
		if active && len(interleaveDaysSpots) > 0 {
			if allCompleted {
				<div
 					class="flex gap-1 justify-center items-center py-2 px-4 font-semibold text-green-800 rounded-xl border border-green-800 bg-green-500/50"
				>
					@heroicons.IconCheckCircleSolid("-ml-1 size-5")
					Completed
				</div>
			} else {
				<button
 					onClick={ components.ShowModal(completeInterleaveDaysFormId) }
 					type="button"
 					class="flex gap-1 justify-center items-center py-2 px-4 font-semibold text-green-800 rounded-xl transition duration-200 bg-green-700/10 hover:bg-green-700/20 focusable"
				>
					@heroicons.IconCheckCircleOutline("-ml-1 size-5")
					Complete
				</button>
				@CompleteInterleaveDaysForm(planID, csrf, interleaveDaysSpots)
			}
		}
	</section>
}

const completeInterleaveFormId = "complete-interleave-form"

templ PracticePlanInterleaveSpots(interleaveSpots []PracticePlanSpot, planID string, csrf string, allCompleted bool, active bool, showHeading bool) {
	<section id="interleave-spots" class="flex flex-col gap-2">
		if showHeading {
			<h3 class="px-2 pb-1 text-xl font-semibold text-center border-b-2 border-black">Interleave Spots</h3>
			<p class="w-full text-sm">Play these spots throughout your practicing. Try to play them correctly the first time.</p>
		}
		if len(interleaveSpots) > 0 {
			<ul id="interleave-spot-list" class="flex flex-col gap-2 w-full list-none">
				for _, spot := range interleaveSpots {
					@components.PracticePlanSpotCard(spot.PieceID, spot.ID, spot.Name, spot.Measures, "interleave", spot.PieceTitle, spot.Completed)
				}
			</ul>
		} else {
			<p class="w-full text-sm">No Interleave Spots</p>
		}
		if active && len(interleaveSpots) > 0 {
			if allCompleted {
				<div
 					class="flex gap-1 justify-center items-center py-2 px-4 font-semibold text-green-800 rounded-xl border border-green-800 bg-green-500/50"
				>
					@heroicons.IconCheckCircleSolid("-ml-1 size-5")
					Completed
				</div>
			} else {
				<button
 					onClick={ components.ShowModal(completeInterleaveFormId) }
 					type="button"
 					class="flex gap-1 justify-center items-center py-2 px-4 font-semibold text-green-800 rounded-xl transition duration-200 bg-green-700/10 hover:bg-green-700/20 focusable"
				>
					@heroicons.IconCheckCircleOutline("-ml-1 size-5")
					Complete
				</button>
				@CompleteInterleaveForm(planID, csrf, interleaveSpots)
			}
		}
	</section>
}

// TODO: add icons on larger (or all) screens.

templ CompleteInterleaveForm(planID string, csrf string, spots []PracticePlanSpot) {
	<dialog id={ completeInterleaveFormId } class="modal" aria-labelledby="interleave-form-modal-title" class="flex flex-col gap-2 bg-gradient-to-t from-neutral-50 to-[#fff9ee] text-left">
		<header class="p-4 mt-2 max-w-lg text-center sm:text-left">
			<h3 id="interleave-form-modal-title" class="text-2xl font-semibold leading-6 text-neutral-900">Evaluate Interleave Spots</h3>
			<p class="text-sm">Evaluate how well you think you did on each spot below. Only click excellent if you were able to play correctly the first time</p>
		</header>
		<form
 			hx-post={ "/library/plans/" + planID + "/interleave/complete-all" }
 			hx-headers={ components.HxCsrfHeader(csrf) }
 			hx-target="#interleave-spots"
 			hx-swap="outerHTML transition:true"
 			hx-on::after-request={ components.CloseModal(completeInterleaveFormId) }
 			class="flex flex-col gap-2 p-4 w-full max-w-lg"
		>
			<ul id="interleave-spot-list" class="flex flex-col gap-2 w-full list-none">
				for _, spot := range spots {
					<li class="flex flex-wrap gap-4 justify-between items-center" id={ "quality-" + spot.ID }>
						<span class="flex flex-wrap items-center">
							{ spot.Name }
							if spot.Measures != "" {
								- { spot.Measures }
							}
						</span>
						<span class="flex gap-1">
							<label for={ spot.ID + ".quality.poor" } class="flex relative py-3 pr-2 pl-4 text-red-800 rounded-xl cursor-pointer quality-option poor-radio-option focusable" id={ spot.ID + ".quality.poor" + "-label" }>
								<input
 									type="radio"
 									name={ spot.ID + ".quality" }
 									id={ spot.ID + ".quality.poor" }
 									value="poor"
 									class="sr-only"
 									aria-labelledby={ spot.ID + ".quality.poor" + "-label" }
 									onchange={ changeSelectedQuality(spot.ID, "poor") }
								/>
								<span class="flex flex-1 gap-1 items-center">
									@heroicons.IconHandThumbDownSolid("-ml-1 size-5 text-red-800/80")
									<span class="font-medium">
										Poor
									</span>
								</span>
								@heroicons.IconCheckCircleSolid("ml-3 size-5 text-red-800 icon")
								<span class="absolute -inset-px rounded-xl border-2 pointer-events-none radio-border" aria-hidden="true"></span>
							</label>
							<label for={ spot.ID + ".quality.fine" } class="flex relative py-3 pr-2 pl-4 rounded-xl cursor-pointer quality-option fine-radio-option text-sky-800 checked focusable" id={ spot.ID + ".quality.fine" + "-label" }>
								<input
 									type="radio"
 									name={ spot.ID + ".quality" }
 									id={ spot.ID + ".quality.fine" }
 									value="fine"
 									class="sr-only"
 									checked
 									aria-labelledby={ spot.ID + ".quality.fine" + "-label" }
 									onchange={ changeSelectedQuality(spot.ID, "fine") }
								/>
								<span class="flex flex-1 gap-1 items-center">
									@heroicons.IconHandRaisedSolid("-ml-1 size-5 text-sky-800/80")
									<span class="font-medium">
										Fine
									</span>
								</span>
								@heroicons.IconCheckCircleSolid("ml-3 size-5 text-sky-800 icon")
								<span class="absolute -inset-px rounded-xl border-2 pointer-events-none radio-border" aria-hidden="true"></span>
							</label>
							<label for={ spot.ID + ".quality.excellent" } class="flex relative py-3 pr-2 pl-4 text-green-800 rounded-xl cursor-pointer quality-option excellent-radio-option focusable" id={ spot.ID + ".quality.excellent" + "-label" }>
								<input
 									type="radio"
 									name={ spot.ID + ".quality" }
 									id={ spot.ID + ".quality.excellent" }
 									value="excellent"
 									class="sr-only"
 									aria-labelledby={ spot.ID + ".quality.excellent" + "-label" }
 									onchange={ changeSelectedQuality(spot.ID, "excellent") }
								/>
								<span class="flex flex-1 gap-1 items-center">
									@heroicons.IconHandThumbUpSolid("-ml-1 size-5 text-green-800/80")
									<span class="font-medium">
										Excellent
									</span>
								</span>
								@heroicons.IconCheckCircleSolid("ml-3 size-5 text-green-800 icon")
								<span class="absolute -inset-px rounded-xl border-2 pointer-events-none radio-border" aria-hidden="true"></span>
							</label>
						</span>
					</li>
				}
			</ul>
			<section class="flex flex-wrap gap-2 mt-4 w-full">
				<button
 					onclick={ components.CloseModal(completeInterleaveFormId) }
 					class="flex-grow text-red-800 action-button bg-red-700/10 hover:bg-red-700/20 focusable"
 					type="button"
				>
					@heroicons.IconXCircleSolid("-ml-1 size-5 text-red-800")
					Close
				</button>
				<button
 					class="flex-grow text-green-800 action-button bg-green-700/10 hover:bg-green-700/20 focusable"
 					type="submit"
				>
					@heroicons.IconCheckCircleSolid("-ml-1 size-5 text-green-800")
					Complete
				</button>
			</section>
		</form>
	</dialog>
}

const completeInterleaveDaysFormId = "complete-interleave-days-form"

templ CompleteInterleaveDaysForm(planID string, csrf string, spots []PracticePlanSpot) {
	<dialog id={ completeInterleaveDaysFormId } class="modal" aria-labelledby="interleave-days-form-modal-title" class="flex flex-col gap-2 bg-gradient-to-t from-neutral-50 to-[#fff9ee] text-left">
		<header class="p-4 mt-2 max-w-lg text-center sm:text-left">
			<h3 id="interleave-days-form-modal-title" class="text-2xl font-semibold leading-6 text-neutral-900">Evaluate Infrequent Spots</h3>
			<p class="text-sm">Evaluate how well you think you did on each spot below.</p>
			<p class="text-sm">When you have been playing a spot for a long time, you may get the option to choose “Completed” and stop it from coming up again.</p>
		</header>
		<form
 			hx-post={ "/library/plans/" + planID + "/infrequent/complete-all" }
 			hx-headers={ components.HxCsrfHeader(csrf) }
 			hx-target="#interleave-days-spots"
 			hx-swap="outerHTML transition:true"
 			hx-on::after-request={ components.CloseModal(completeInterleaveDaysFormId) }
 			class="flex flex-col gap-2 p-4 w-full max-w-lg"
		>
			<ul id="interleave-spot-list" class="flex flex-col gap-2 w-full list-none">
				for _, spot := range spots {
					<li class="flex flex-wrap gap-4 justify-between items-center" id={ "quality-" + spot.ID }>
						<span class="flex flex-wrap items-center">
							{ spot.Name }
							if spot.Measures != "" {
								- { spot.Measures }
							}
						</span>
						<span class="flex gap-1">
							<label for={ spot.ID + ".quality.poor" } class="flex relative py-3 pr-2 pl-4 text-red-800 rounded-xl cursor-pointer quality-option poor-radio-option focusable" id={ spot.ID + ".quality.poor" + "-label" }>
								<input
 									type="radio"
 									name={ spot.ID + ".quality" }
 									id={ spot.ID + ".quality.poor" }
 									value="poor"
 									class="sr-only"
 									aria-labelledby={ spot.ID + ".quality.poor" + "-label" }
 									onchange={ changeSelectedQuality(spot.ID, "poor") }
								/>
								<span class="flex flex-1 gap-1 items-center">
									@heroicons.IconHandThumbDownSolid("-ml-1 size-5 text-red-800/80")
									<span class="font-medium">
										Poor
									</span>
								</span>
								@heroicons.IconCheckCircleSolid("ml-3 size-5 text-red-800 icon")
								<span class="absolute -inset-px rounded-xl border-2 pointer-events-none radio-border" aria-hidden="true"></span>
							</label>
							<label for={ spot.ID + ".quality.fine" } class="flex relative py-3 pr-2 pl-4 rounded-xl cursor-pointer quality-option fine-radio-option text-sky-800 checked focusable" id={ spot.ID + ".quality.fine" + "-label" }>
								<input
 									type="radio"
 									name={ spot.ID + ".quality" }
 									id={ spot.ID + ".quality.fine" }
 									value="fine"
 									class="sr-only"
 									checked
 									aria-labelledby={ spot.ID + ".quality.fine" + "-label" }
 									onchange={ changeSelectedQuality(spot.ID, "fine") }
								/>
								<span class="flex flex-1 gap-1 items-center">
									@heroicons.IconHandRaisedSolid("-ml-1 size-5 text-sky-800/80")
									<span class="font-medium">
										Fine
									</span>
								</span>
								@heroicons.IconCheckCircleSolid("ml-3 size-5 text-sky-800 icon")
								<span class="absolute -inset-px rounded-xl border-2 pointer-events-none radio-border" aria-hidden="true"></span>
							</label>
							if spot.SkipDays > 6 && spot.DaysSinceStarted > 20 {
								<label for={ spot.ID + ".quality.completed" } class="flex relative py-3 pr-2 pl-4 text-green-800 rounded-xl cursor-pointer quality-option excellent-radio-option focusable" id={ spot.ID + ".quality.completed" + "-label" }>
									<input
 										type="radio"
 										name={ spot.ID + ".quality" }
 										id={ spot.ID + ".quality.completed" }
 										value="completed"
 										class="sr-only"
 										aria-labelledby={ spot.ID + ".quality.completed" + "-label" }
 										onchange={ changeSelectedQuality(spot.ID, "completed") }
									/>
									<span class="flex flex-1 gap-1 items-center">
										@heroicons.IconCheckCircleSolid("-ml-1 size-5 text-green-800/80")
										<span class="font-medium">
											Complete
										</span>
									</span>
									@heroicons.IconCheckCircleSolid("ml-3 size-5 text-green-800 icon")
									<span class="absolute -inset-px rounded-xl border-2 pointer-events-none radio-border" aria-hidden="true"></span>
								</label>
							} else {
								<label for={ spot.ID + ".quality.excellent" } class="flex relative py-3 pr-2 pl-4 text-green-800 rounded-xl cursor-pointer quality-option excellent-radio-option focusable" id={ spot.ID + ".quality.excellent" + "-label" }>
									<input
 										type="radio"
 										name={ spot.ID + ".quality" }
 										id={ spot.ID + ".quality.excellent" }
 										value="excellent"
 										class="sr-only"
 										aria-labelledby={ spot.ID + ".quality.excellent" + "-label" }
 										onchange={ changeSelectedQuality(spot.ID, "excellent") }
									/>
									<span class="flex flex-1 gap-1 items-center">
										@heroicons.IconHandThumbUpSolid("-ml-1 size-5 text-green-800/80")
										<span class="font-medium">
											Excellent
										</span>
									</span>
									@heroicons.IconCheckCircleSolid("ml-3 size-5 text-green-800 icon")
									<span class="absolute -inset-px rounded-xl border-2 pointer-events-none radio-border" aria-hidden="true"></span>
								</label>
							}
						</span>
					</li>
				}
			</ul>
			<section class="flex flex-wrap gap-2 mt-4 w-full">
				<button
 					onclick={ components.CloseModal(completeInterleaveDaysFormId) }
 					class="flex-grow text-red-800 action-button bg-red-700/10 hover:bg-red-700/20 focusable"
 					type="button"
				>
					@heroicons.IconXCircleSolid("-ml-1 size-5 text-red-800")
					Close
				</button>
				<button
 					class="flex-grow text-green-800 action-button bg-green-700/10 hover:bg-green-700/20 focusable"
 					type="submit"
				>
					@heroicons.IconCheckCircleSolid("-ml-1 size-5 text-green-800")
					Complete
				</button>
			</section>
		</form>
	</dialog>
}

// TODO: show associated practice session information
/*

	hx-post={ "/library/plans/" + planID + "/interleave-spots/complete-all" }
	hx-headers={ components.HxCsrfHeader(csrf) }
	hx-target="#interleave-spots"
	hx-swap="outerHTML transition:true"
*/
