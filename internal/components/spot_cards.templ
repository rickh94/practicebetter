package components

const baseSpotCardClass = "focusable flex rounded-xl relative border px-4 py-2 text-black shadow-sm shadow-black/20 transition-all duration-200"

func getSpotCardClass(completed bool, stage string) string {
	if completed {
		return baseSpotCardClass + " bg-green-200 border-green-700"
	} else {

		return baseSpotCardClass + " " + getStageColor(stage) + " border-neutral-800 hover:shadow"
	}
}

templ SpotCardHeadingWithMeasures(name, pieceTitle, measures string, showTitle bool) {
	if showTitle {
		<h3 class="text-sm italic text-neutral-900 truncate">
			{ pieceTitle }
		</h3>
	}
	<h4 class="text-lg font-bold truncate">
		{ name }
	</h4>
	if measures != "" {
		<span class="text-base font-medium">
			Measure(s): { measures }
		</span>
	}
}

templ SpotCardHeading(name, pieceTitle string, showTitle bool) {
	@SpotCardHeadingWithMeasures(name, pieceTitle, "", showTitle)
}

templ SpotMeasures(measures string) {
	<div class="text-sm">
		<h4 class="text-sm">
			Measures
		</h4>
		<p class="font-semibold">
			if measures == "" {
				No Measures
			} else {
				{ measures }
			}
		</p>
	</div>
}

templ BaseSpotCard(spotID, name, measures, stage, href string, practiced bool, showTitle bool, pieceTitle string, hidden bool, showStage bool) {
	<li id={ "spot-" + spotID } data-spot-stage={ stage } class={ "block transition-all duration-200 spot-card", templ.KV("hidden", hidden) }>
		@HxLink(getSpotCardClass(practiced, stage), href, "#main-content") {
			<div class="flex flex-col flex-grow min-w-0 overflow-x-clip">
				@SpotCardHeading(name, pieceTitle, showTitle)
				if practiced {
					<div class="text-sm font-bold">
						Completed
					</div>
				}
				@SpotMeasures(measures)
				if showStage {
					<div class="text-sm whitespace-break-spaces">
						<h4 class="text-sm">
							Stage
						</h4>
						<p>
							<spot-stage class="font-semibold" stage={ stage }></spot-stage>
						</p>
					</div>
				}
			</div>
			<div class="mr-3 size-6"></div>
			if practiced || stage == "completed" {
				<span
 					class="absolute right-0 top-1/2 mr-3 text-green-900 transform -translate-y-1/2 size-6 icon-[iconamoon--check-circle-1-duotone]"
 					aria-hidden="true"
				></span>
				<span class="sr-only">Completed</span>
			} else if stage == "extra_repeat" || stage == "repeat" {
				<span class="absolute right-0 top-1/2 mr-3 text-black transform -translate-y-1/2 size-6 icon-[iconamoon--playlist-repeat-list-thin]" aria-hidden="true"></span>
				<span class="sr-only">Click to view</span>
			} else if stage == "random" {
				<span class="absolute right-0 top-1/2 mr-3 text-black transform -translate-y-1/2 size-6 icon-[iconamoon--playlist-shuffle-thin]" aria-hidden="true"></span>
				<span class="sr-only">Click to view</span>
			} else if stage == "interleave" {
				<span class="absolute right-0 top-1/2 mr-3 text-black transform -translate-y-1/2 size-6 icon-[iconamoon--bookmark-thin]" aria-hidden="true"></span>
				<span class="sr-only">Click to view</span>
			} else if stage == "interleave_days" {
				<span class="absolute right-0 top-1/2 mr-3 text-black transform -translate-y-1/2 size-6 icon-[iconamoon--calendar-1-thin]" aria-hidden="true"></span>
				<span class="sr-only">Click to view</span>
			}
			<span class="sr-only">Click to view spot</span>
		}
	</li>
}

templ SmallSpotCard(pieceID, spotID, name, measures, stage string) {
	@BaseSpotCard(spotID, name, measures, stage, "/library/pieces/"+pieceID+"/spots/"+spotID, false, false, "", false, true)
}

templ PracticeSpotCard(pieceID, spotID, name, measures, stage string, hidden bool) {
	@BaseSpotCard(spotID, name, measures, stage, "/library/pieces/"+pieceID+"/spots/"+spotID+"/practice/repeat", false, false, "", hidden, true)
}

templ PracticePlanSpotCard(pieceID, spotID, name, measures, stage string, pieceTitle string, practiced bool) {
	if stage == "extra_repeat" || stage == "repeat" {
		@BaseSpotCard(spotID, name, measures, stage, "/library/pieces/"+pieceID+"/spots/"+spotID+"/practice/repeat", practiced, true, pieceTitle, false, false)
	} else {
		@BaseSpotCard(spotID, name, measures, stage, "/library/pieces/"+pieceID+"/spots/"+spotID, practiced, true, pieceTitle, false, false)
	}
}

/*
 * For interleave:
 *    needs to load/save evaluation state to localStorage on click of excellent, fine, poor.
 *    needs to close modal and open next modal of next spot.
 * For infrequent:
 *    needs to immediately complete spot with evaluation result based on excellent/fine/poor.
 *    needs to close modal and open next modal of next spot.
 */

const INTERLEAVE_SPOT_DIALOG_ID = "interleave-spot-dialog"
const INTERLEAVE_SPOT_DIALOG_CONTENTS_ID = "interleave-spot-dialog-contents"

const INFREQUENT_SPOT_DIALOG_ID = "infrequent-spot-dialog"
const INFREQUENT_SPOT_DIALOG_CONTENTS_ID = "infrequent-spot-dialog-contents"

script ShowInterleaveModal(id string) {
	const d = document.getElementById(id);
	d.showModal();
	globalThis.handleShowModal();
}

templ InterleaveSpotCardOOB(pieceID, spotID, name, measures, stage string, pieceTitle string, active bool, practiced bool, oob bool) {
	<li
 		id={ "spot-" + spotID }
 		data-spot-stage={ stage }
 		class={ "block transition-all duration-200 spot-card overflow-hidden" }
 		if oob {
			hx-swap-oob="outerHTML"
		}
	>
		if practiced || !active {
			@HxLink(getSpotCardClass(practiced, stage), "/library/pieces/"+pieceID+"/spots/"+spotID, "#main-content") {
				@InterleaveSpotItem(name, pieceTitle, measures, stage, practiced)
			}
		} else {
			<button
 				class={ getSpotCardClass(practiced, stage), "w-full" }
 				hx-get={ "/library/plans/" + GetActivePracticePlan(ctx) + "/" + stage + "/" + spotID }
 				hx-target={ "#" + INTERLEAVE_SPOT_DIALOG_CONTENTS_ID }
 				hx-swap="innerHTML transition:true"
 				hx-on::after-request={ ShowModal(INTERLEAVE_SPOT_DIALOG_ID) }
			>
				@InterleaveSpotItem(name, pieceTitle, measures, stage, practiced)
			</button>
		}
	</li>
}

templ InterleaveSpotCard(pieceID, spotID, name, measures, stage string, pieceTitle string, practiced bool, active bool) {
	@InterleaveSpotCardOOB(pieceID, spotID, name, measures, stage, pieceTitle, active, practiced, false)
}

// TODO: make this nice

templ InterleaveSpotItem(name, pieceTitle, measures, stage string, practiced bool) {
	<div class="flex flex-col flex-grow items-start min-w-0 text-left overflow-x-clip">
		@SpotCardHeading(name, pieceTitle, true)
		if practiced {
			<div class="text-sm font-bold">
				Completed
			</div>
		}
		@SpotMeasures(measures)
	</div>
	if practiced {
		<span
 			class="absolute right-0 top-1/2 mr-3 text-green-900 transform -translate-y-1/2 size-8 icon-[iconamoon--check-circle-1-duotone]"
 			aria-hidden="true"
		></span>
		<span class="sr-only">Completed</span>
	} else if stage == "interleave" {
		<span class="absolute right-0 top-1/2 mr-3 text-black transform -translate-y-1/2 size-6 icon-[iconamoon--bookmark-thin]" aria-hidden="true"></span>
		<span class="sr-only">Click to view</span>
	} else if stage == "interleave_days" {
		<span class="absolute right-0 top-1/2 mr-3 text-black transform -translate-y-1/2 size-6 icon-[iconamoon--calendar-1-thin]" aria-hidden="true"></span>
		<span class="sr-only">Click to view</span>
	}
	<span class="sr-only">Click to view spot</span>
}
