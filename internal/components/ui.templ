package components

import "practicebetter/internal/heroicons"
import "strconv"

script ShowModal(id string) {
	document.getElementById(id).showModal();
}

script CloseModal(id string) {
	const modal = document.getElementById(id);
	modal.classList.add('close'); // run animation here

	requestAnimationFrame(function () {
		requestAnimationFrame(function () {
			modal.classList.remove('close');
			modal.close(); // then run the default close method
		});
	});
}

templ ClearButton(buttonType string) {
	<button
 		type={ buttonType }
 		class="flex gap-1 justify-center items-center py-2 px-4 text-lg font-semibold text-white bg-transparent border border-white hover:bg-white/20"
	>
		{ children... }
	</button>
}

templ ClearButtonLink(href, hxTarget, hxSwap  string) {
	<a
 		href={ templ.URL(href) }
 		hx-get={ string(templ.URL(href)) }
 		hx-target={ hxTarget }
 		hx-push-url="true"
 		hx-swap={ hxSwap + " swap:400ms" }
 		class="flex gap-1 justify-center items-center py-2 px-4 text-lg font-semibold text-white bg-transparent border border-white hover:bg-white/20"
	>
		{ children... }
	</a>
}

templ GreenButton(buttonType string, onClick templ.ComponentScript) {
	<button
 		type={ buttonType }
 		onclick={ onClick }
 		class="flex gap-1 justify-center items-center py-2 px-4 font-semibold text-green-800 rounded-xl transition duration-200 bg-green-700/10 hover:bg-green-700/20 focusable"
	>
		{ children... }
	</button>
}

templ RedButton(buttonType string, onClick templ.ComponentScript) {
	<button
 		type={ buttonType }
 		onclick={ onClick }
 		class="flex gap-1 justify-center items-center py-2 px-4 font-semibold text-red-800 rounded-xl transition duration-200 bg-red-700/10 hover:bg-red-700/20 focusable"
	>
		{ children... }
	</button>
}

templ BasicButton(class string, buttonType string) {
	<button
 		type={ buttonType }
 		class={ "focusable flex items-center justify-center gap-1 rounded-xl px-4 py-2 font-semibold transition duration-200 bg-neutral-700/10 text-neutral-800 hover:bg-neutral-700/20", class }
	>
		{ children... }
	</button>
}

templ BasicButtonLink(href, hxTarget, hxSwap  string) {
	<a
 		href={ templ.URL(href) }
 		hx-get={ string(templ.URL(href)) }
 		hx-target={ hxTarget }
 		hx-push-url="true"
 		hx-swap={ hxSwap + " swap:305ms" }
 		class="flex gap-1 justify-center items-center py-2 px-4 font-semibold rounded-xl transition duration-200 bg-neutral-700/10 text-neutral-800 hover:bg-neutral-700/20 focusable"
	>
		{ children... }
	</a>
}

templ ReadMoreButton(id string) {
	<button
 		class={ navClasses }
 		onclick={ ShowModal(id) }
	>
		Read More
		@heroicons.IconInformationCircleSolid("-mr-1 h-5 w-5")
	</button>
}

type BreadcrumbInfo struct {
	Label  string
	Href   string
	Active bool
}

templ Breadcrumb(bc []BreadcrumbInfo) {
	<div class="flex">
		<nav aria-label="Breadcrumb" class="block">
			<ul class="flex flex-grow-0 justify-around items-center py-2 px-4 rounded-xl sm:justify-start sm:text-xl bg-neutral-900/10">
				for i, b := range bc {
					<li
 						class={ "flex items-center", templ.KV("text-neutral-900", b.Active), templ.KV("text-neutral-900/50", !b.Active) }
 						if b.Active {
							aria-current="true"
						}
					>
						@HxLink("", b.Href, "#main-content") {
							{ b.Label }
						}
					</li>
					if i != len(bc) - 1 {
						<span class="flex items-center h-full text-neutral-900/50" aria-hidden="true">
							@heroicons.IconChevronRightSolid("w-4 h-4 sm:w-6 sm:h-6")
						</span>
					}
				}
			</ul>
		</nav>
	</div>
}

// TODO: make actual link

templ PieceCard(pieceID string, title string, composer string, activeSpots int64, inactiveSpots int64) {
	<li>
		@HxLink("focusable flex rounded-xl bg-neutral-700/10 px-6 py-4 text-neutral-700 hover:bg-neutral-700/20", "/library/pieces/"+pieceID, "#main-content") {
			<div class="flex flex-col flex-1 flex-grow gap-1">
				<div>
					<strong class="text-xl font-bold">{ title }</strong> â€”{ " " }
					{ composer }
				</div>
				<div>Active Spots: { strconv.FormatInt(activeSpots, 10) }</div>
				<div>Finished Spots: { strconv.FormatInt(inactiveSpots, 10) }</div>
			</div>
			<div class="flex flex-grow-0 items-center">
				<div class="sr-only">Click to view</div>
				@heroicons.IconDocumentMagnifyingGlassSolid("w-10 h-10 -mr-2")
			</div>
		}
	</li>
}

templ BaseSpotCard(spotID, name, measures, stage, href string) {
	<li id={ "spot-" + spotID } data-spot-stage={ stage } class="spot-card">
		@HxLink("focusable flex justify-between rounded-xl border border-neutral-500 bg-white/80 px-4 py-2 text-neutral-700 hover:bg-white hover:text-black", href, "#main-content") {
			<div class="flex flex-col flex-grow">
				<h3 class="text-lg font-bold">{ name }</h3>
				<div class="inline text-sm">
					Measures: <em class="italic">{ measures }</em>
				</div>
				<div class="inline text-sm">
					Stage: <em class="italic">{ getStageDisplayName(stage) }</em>
				</div>
			</div>
			@heroicons.IconArrowTopRightOnSquareSolid("mt-4 h-6 w-6")
			<span class="sr-only">Click to view spot</span>
		}
	</li>
}

templ SmallSpotCard(pieceID, spotID, name, measures,  stage string) {
	@BaseSpotCard(spotID, name, measures, stage, "/library/pieces/"+pieceID+"/spots/"+spotID)
}

templ PracticeSpotCard(pieceID, spotID, name, measures,  stage string) {
	@BaseSpotCard(spotID, name, measures, stage, "/library/pieces/"+pieceID+"/spots/"+spotID+"/practice/repeat")
}

templ PracticeToolNav(activepath string) {
	<practice-tool-nav activepath={ activepath }></practice-tool-nav>
}
