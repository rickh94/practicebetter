package components

import "practicebetter/internal/heroicons"
import "strconv"
import "practicebetter/internal/icons"

script ShowModal(id string) {
	document.getElementById(id).showModal();
}

script CloseModal(id string) {
	const modal = document.getElementById(id);
	modal.classList.add('close'); // run animation here

	requestAnimationFrame(function () {
		requestAnimationFrame(function () {
			modal.classList.remove('close');
			modal.close(); // then run the default close method
		});
	});
}

templ ClearButton(buttonType string) {
	<button
 		type={ buttonType }
 		class="flex gap-1 justify-center items-center py-2 px-4 text-lg font-semibold text-white bg-transparent border border-white hover:bg-white/20"
	>
		{ children... }
	</button>
}

templ ClearButtonLink(href, hxTarget, hxSwap  string) {
	<a
 		href={ templ.URL(href) }
 		hx-get={ string(templ.URL(href)) }
 		hx-target={ hxTarget }
 		hx-push-url="true"
 		hx-swap={ hxSwap + " transition:true" }
 		class="flex gap-1 justify-center items-center py-2 px-4 text-lg font-semibold text-white bg-transparent border border-white hover:bg-white/20"
	>
		{ children... }
	</a>
}

templ GreenButton(buttonType string, onClick templ.ComponentScript) {
	<button
 		type={ buttonType }
 		onclick={ onClick }
 		class="flex gap-1 justify-center items-center py-2 px-4 font-semibold text-green-800 rounded-xl transition duration-200 bg-green-700/10 hover:bg-green-700/20 focusable"
	>
		{ children... }
	</button>
}

templ SkyButton(buttonType string, onClick templ.ComponentScript) {
	<button
 		type={ buttonType }
 		onclick={ onClick }
 		class="flex gap-1 justify-center items-center py-2 px-4 font-semibold rounded-xl transition duration-200 text-sky-800 bg-sky-700/10 hover:bg-sky-700/20 focusable"
	>
		{ children... }
	</button>
}

templ YellowButton(buttonType string, onClick templ.ComponentScript) {
	<button
 		type={ buttonType }
 		onclick={ onClick }
 		class="flex gap-1 justify-center items-center py-2 px-4 font-semibold text-yellow-800 rounded-xl transition duration-200 bg-yellow-700/10 hover:bg-yellow-700/20 focusable"
	>
		{ children... }
	</button>
}

templ RedButton(buttonType string, onClick templ.ComponentScript) {
	<button
 		type={ buttonType }
 		onclick={ onClick }
 		class="flex gap-1 justify-center items-center py-2 px-4 font-semibold text-red-800 rounded-xl transition duration-200 bg-red-700/10 hover:bg-red-700/20 focusable"
	>
		{ children... }
	</button>
}

templ BasicButton(class string, buttonType string) {
	<button
 		type={ buttonType }
 		class={ "focusable flex items-center justify-center gap-1 rounded-xl px-4 py-2 font-semibold transition duration-200 bg-neutral-700/10 text-neutral-800 hover:bg-neutral-700/20", class }
	>
		{ children... }
	</button>
}

templ BasicButtonLink(href, hxTarget, hxSwap  string) {
	<a
 		href={ templ.URL(href) }
 		hx-get={ string(templ.URL(href)) }
 		hx-target={ hxTarget }
 		hx-push-url="true"
 		hx-swap={ hxSwap + " transition:true" }
 		class="flex gap-1 justify-center items-center py-2 px-4 font-semibold rounded-xl transition duration-200 bg-neutral-700/10 text-neutral-800 hover:bg-neutral-700/20 focusable"
	>
		{ children... }
	</a>
}

templ ReadMoreButton(id string) {
	<button
 		class={ navClasses }
 		onclick={ ShowModal(id) }
	>
		Read More
		@heroicons.IconInformationCircleSolid("-mr-1 size-5")
	</button>
}

type BreadcrumbInfo struct {
	Label  string
	Href   string
	Active bool
}

// TODO: fix too much top padding repeat practice page
// TODO: fix overflowing breadcrumb on very small screens

templ BreadcrumbWrapper() {
	<div class="flex">
		<nav aria-label="Breadcrumb" class="block">
			<ul class="flex flex-grow-0 justify-around items-center py-2 px-4 rounded-xl sm:justify-start sm:text-xl bg-neutral-900/10">
				{ children... }
			</ul>
		</nav>
	</div>
}

templ Breadcrumb(bc []BreadcrumbInfo) {
	@BreadcrumbWrapper() {
		for i, b := range bc {
			@BreadcrumbItem(b.Label, b.Href, b.Active, i == len(bc) - 1, false)
		}
	}
}

type BreadcrumbWithDatesInfo struct {
	Label  string
	Href   string
	Active bool
	IsDate bool
}

templ BreadcrumbWithDates(bc []BreadcrumbWithDatesInfo) {
	@BreadcrumbWrapper() {
		for i, b := range bc {
			@BreadcrumbItem(b.Label, b.Href, b.Active, i == len(bc) - 1, b.IsDate)
		}
	}
}

templ BreadcrumbItem(label string, href string, active bool, isLast bool, isDate bool) {
	<li
 		class={ "flex items-center", templ.KV("text-neutral-900", active), templ.KV("text-neutral-900/50", !active) }
 		aria-current?={ active }
	>
		@HxLink("", href, "#main-content") {
			if isDate {
				<number-date epoch={ label }></number-date>
			} else {
				{ label }
			}
		}
	</li>
	if !isLast {
		<span class="flex items-center h-full text-neutral-900/50" aria-hidden="true">
			@heroicons.IconChevronRightSolid("w-4 h-4 sm:w-6 sm:h-6")
		</span>
	}
}

// TODO: make actual link

templ PieceCard(pieceID string, title string, composer string, activeSpots int64, completedSpots int64) {
	<li>
		@HxLink("focusable flex rounded-xl bg-neutral-700/10 px-6 py-4 text-neutral-700 hover:bg-neutral-700/20", "/library/pieces/"+pieceID, "#main-content") {
			<div class="flex flex-col flex-1 flex-grow gap-1">
				<div>
					<strong class="text-xl font-bold">{ title }</strong>
					<span class="whitespace-nowrap">
						—{ " " }
						if composer != "" {
							{ composer }
						} else {
							Unknown
						}
					</span>
				</div>
				<div>Active Spots: { strconv.FormatInt(activeSpots, 10) }</div>
				<div>Finished Spots: { strconv.FormatInt(completedSpots, 10) }</div>
			</div>
			<div class="flex flex-grow-0 items-center">
				<div class="sr-only">Click to view</div>
				@icons.NoteSheetIcon("size-10 -mr-1")
			</div>
		}
	</li>
}

func getPracticeUrl(pieceID, practiceType string) string {
	if practiceType == "random_single" {
		return "/library/pieces/" + pieceID + "/practice/random-single"
	} else if practiceType == "starting_point" {
		return "/library/pieces/" + pieceID + "/practice/starting-point"
	}
	return "/library/pieces/" + pieceID
}

const pieceCardClass = "focusable flex rounded-xl px-6 py-4 text-neutral-700"

func getPracticePlanPieceCardClass(completed bool) string {
	if completed {
		return pieceCardClass + " bg-green-500/50"
	} else {
		return pieceCardClass + " bg-neutral-700/10 hover:bg-neutral-700/20"
	}
}

templ PracticePlanPieceCard(pieceID string, title string, composer string, activeSpots int64, completedSpots int64, completed bool, practiceType string) {
	<li>
		@HxLink(getPracticePlanPieceCardClass(completed), getPracticeUrl(pieceID, practiceType), "#main-content") {
			<div class="flex flex-col flex-1 flex-grow gap-1">
				<div>
					<strong class="text-xl font-bold">{ title }</strong>
					<span class="whitespace-nowrap">
						—{ " " }{ composer }
					</span>
				</div>
				<div>Active Spots: { strconv.FormatInt(activeSpots, 10) }</div>
				if completed {
					<div class="font-bold">Completed</div>
				} else {
					<div class="font-medium">Click to Practice</div>
				}
			</div>
			<div class="flex flex-grow-0 items-center">
				if completed {
					@heroicons.IconCheckCircleSolid("size-10 -mr-2 text-green-900")
					<span class="sr-only">Completed</span>
				} else {
					<div class="sr-only">Click to view</div>
					@icons.NoteSheetIcon("size-10 -mr-1")
				}
			</div>
		}
	</li>
}

const baseSpotCardClass = "focusable flex rounded-xl relative border px-4 py-2 text-neutral-800 hover:text-black"

func getSpotCardClass(completed bool, stage string) string {
	if completed {
		return baseSpotCardClass + " bg-green-500/50 border-green-800"
	} else {

		return baseSpotCardClass + " " + getStageColor(stage) + " border-neutral-800"
	}
}

templ BaseSpotCard(spotID, name, measures, stage, href string, practiced bool, showTitle bool, pieceTitle string, hidden bool) {
	<li id={ "spot-" + spotID } data-spot-stage={ stage } class={ "block transition-all duration- spot-card", templ.KV("hidden", hidden) }>
		@HxLink(getSpotCardClass(practiced, stage), href, "#main-content") {
			<div class="flex flex-col flex-grow overflow-x-clip">
				<h3 class="text-lg font-bold truncate">
					{ name }
					if showTitle {
						<span class="text-neutral-700">
							- { pieceTitle }
						</span>
					}
				</h3>
				if practiced {
					<div class="text-sm font-bold">
						Completed
					</div>
				}
				<div class="text-sm">
					<h4 class="text-sm">
						Measures
					</h4>
					<p class="font-semibold">
						if measures == "" {
							No Measures
						} else {
							{ measures }
						}
					</p>
				</div>
				<div class="text-sm whitespace-break-spaces">
					<h4 class="text-sm">
						Stage
					</h4>
					<p>
						<spot-stage class="font-semibold" stage={ stage }></spot-stage>
					</p>
				</div>
			</div>
			if practiced || stage == "completed" {
				<div class="mr-3 size-6"></div>
				@heroicons.IconCheckCircleSolid("size-6 mr-3 absolute right-0 top-1/2 transform -translate-y-1/2 text-green-900")
				<span class="sr-only">Completed</span>
			} else if stage == "extra_repeat" || stage == "repeat" {
				<div class="mr-3 size-6"></div>
				@icons.RepeatIcon("size-6 mr-3 absolute right-0 top-1/2 transform -translate-y-1/2 text-black")
				<span class="sr-only">Click to view</span>
			} else if stage == "random" {
				<div class="mr-3 size-6"></div>
				@icons.ShuffleIcon("size-6 mr-3 absolute right-0 top-1/2 transform -translate-y-1/2 text-black")
				<span class="sr-only">Click to view</span>
			} else if stage == "interleave" {
				<div class="mr-3 size-6"></div>
				@heroicons.IconBookmarkSolid("size-6 mr-3 absolute right-0 top-1/2 transform -translate-y-1/2 text-black")
				<span class="sr-only">Click to view</span>
			} else if stage == "interleave_days" {
				<div class="mr-3 size-6"></div>
				@heroicons.IconCalendarDaysSolid("size-6 mr-3 absolute right-0 top-1/2 transform -translate-y-1/2 text-black")
				<span class="sr-only">Click to view</span>
			}
			<span class="sr-only">Click to view spot</span>
		}
	</li>
}

templ SmallSpotCard(pieceID, spotID, name, measures, stage string) {
	@BaseSpotCard(spotID, name, measures, stage, "/library/pieces/"+pieceID+"/spots/"+spotID, false, false, "", false)
}

templ PracticeSpotCard(pieceID, spotID, name, measures, stage string, hidden bool) {
	@BaseSpotCard(spotID, name, measures, stage, "/library/pieces/"+pieceID+"/spots/"+spotID+"/practice/repeat", false, false, "", hidden)
}

templ PracticePlanSpotCard(pieceID, spotID, name, measures, stage string, pieceTitle string, practiced bool) {
	if stage == "extra_repeat" || stage == "repeat" {
		@BaseSpotCard(spotID, name, measures, stage, "/library/pieces/"+pieceID+"/spots/"+spotID+"/practice/repeat", practiced, true, pieceTitle, false)
	} else {
		@BaseSpotCard(spotID, name, measures, stage, "/library/pieces/"+pieceID+"/spots/"+spotID, practiced, true, pieceTitle, false)
	}
}

templ PracticeToolNav(activepath string) {
	<practice-tool-nav activepath={ activepath }></practice-tool-nav>
}

templ PracticePlanCard(planID string, date int64, newSpots int64, repeatSpots int64, interleaveSpots int64, interleaveDaysSpots int64, pieces int64) {
	@HxLink("flex flex-col gap-4 p-4 text-black bg-white rounded-lg shadow shadow-black/20 focusable hover:bg-violet-200/80", "/library/plans/"+planID, "#main-content") {
		<h3 class="pb-1 text-xl font-bold text-center text-black border-b-2 border-black">
			<pretty-date class="text-black" epoch={ strconv.FormatInt(date, 10) }></pretty-date>
		</h3>
		<dl class="text-sm md:text-base columns-2">
			<div class="flex gap-1">
				<dt class="font-medium">New Spots:{ " " }</dt>
				<dd>{ strconv.FormatInt(newSpots, 10) }</dd>
			</div>
			<div class="flex gap-1">
				<dt class="font-medium">Extra Repeat Spots:{ " " }</dt>
				<dd>{ strconv.FormatInt(repeatSpots, 10) }</dd>
			</div>
			<div class="flex gap-1">
				<dt class="font-medium">Interleave Spots:{ " " }</dt>
				<dd>{ strconv.FormatInt(interleaveSpots, 10) }</dd>
			</div>
			<div class="flex gap-1">
				<dt class="font-medium">Interleave Days Spots:{ " " }</dt>
				<dd>{ strconv.FormatInt(interleaveDaysSpots, 10) }</dd>
			</div>
			<div class="flex gap-1">
				<dt class="font-medium">Pieces:{ " " }</dt>
				<dd>{ strconv.FormatInt(pieces, 10) }</dd>
			</div>
		</dl>
	}
}
