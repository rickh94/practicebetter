package components

import "strconv"

script ShowModal(id string) {
	document.getElementById(id).showModal();
}

script CloseModal(id string) {
	const modal = document.getElementById(id);
	modal.classList.add('close'); // run animation here

	requestAnimationFrame(function () {
		requestAnimationFrame(function () {
			modal.classList.remove('close');
			modal.close(); // then run the default close method
		});
	});
}

templ ClearButton(buttonType string) {
	<button
 		type={ buttonType }
 		class="flex gap-1 justify-center items-center py-2 px-4 text-lg font-semibold text-white bg-transparent border border-white hover:bg-white/20"
	>
		{ children... }
	</button>
}

templ ClearButtonLink(href, hxTarget, hxSwap  string) {
	<a
 		href={ templ.URL(href) }
 		hx-get={ string(templ.URL(href)) }
 		hx-target={ hxTarget }
 		hx-push-url="true"
 		hx-swap={ hxSwap + " transition:true" }
 		class="flex gap-1 justify-center items-center py-2 px-4 text-lg font-semibold text-white bg-transparent border border-white hover:bg-white/20"
	>
		{ children... }
	</a>
}

templ GreenButton(buttonType string, onClick templ.ComponentScript) {
	<button
 		type={ buttonType }
 		onclick={ onClick }
 		class="flex gap-1 justify-center items-center py-2 px-4 font-semibold text-green-800 rounded-xl transition duration-200 bg-green-700/10 hover:bg-green-700/20 focusable"
	>
		{ children... }
	</button>
}

templ SkyButton(buttonType string, onClick templ.ComponentScript) {
	<button
 		type={ buttonType }
 		onclick={ onClick }
 		class="flex gap-1 justify-center items-center py-2 px-4 font-semibold rounded-xl transition duration-200 text-sky-800 bg-sky-700/10 hover:bg-sky-700/20 focusable"
	>
		{ children... }
	</button>
}

templ YellowButton(buttonType string, onClick templ.ComponentScript) {
	<button
 		type={ buttonType }
 		onclick={ onClick }
 		class="flex gap-1 justify-center items-center py-2 px-4 font-semibold text-yellow-800 rounded-xl transition duration-200 bg-yellow-700/10 hover:bg-yellow-700/20 focusable"
	>
		{ children... }
	</button>
}

templ RedButton(buttonType string, onClick templ.ComponentScript) {
	<button
 		type={ buttonType }
 		onclick={ onClick }
 		class="flex gap-1 justify-center items-center py-2 px-4 font-semibold text-red-800 rounded-xl transition duration-200 bg-red-700/10 hover:bg-red-700/20 focusable"
	>
		{ children... }
	</button>
}

templ BasicButton(class string, buttonType string) {
	<button
 		type={ buttonType }
 		class={ "focusable action-button bg-neutral-700/10 text-neutral-800 hover:bg-neutral-700/20", class }
	>
		{ children... }
	</button>
}

templ BasicButtonLink(href, hxTarget, hxSwap  string) {
	<a
 		href={ templ.URL(href) }
 		hx-get={ string(templ.URL(href)) }
 		hx-target={ hxTarget }
 		hx-push-url="true"
 		hx-swap={ hxSwap + " transition:true" }
 		class="action-button bg-neutral-700/10 text-neutral-800 hover:bg-neutral-700/20 focusable"
	>
		{ children... }
	</a>
}

templ ReadMoreButton(id string) {
	<button
 		class={ navClasses }
 		onclick={ ShowModal(id) }
	>
		Read More
		<span class="-mr-1 size-5 icon-[iconamoon--information-circle-thin]" aria-hidden="true"></span>
	</button>
}

type BreadcrumbInfo struct {
	Label  string
	Href   string
	Active bool
}

// TODO: maybe create dropdown with all the links

templ BreadcrumbWrapper() {
	<nav aria-label="Breadcrumb" class="hidden flex-grow-0 md:flex">
		<ul class="flex flex-grow-0 flex-shrink justify-around items-center py-2 px-4 text-sm rounded-xl sm:justify-start sm:text-xl bg-neutral-900/10">
			{ children... }
		</ul>
	</nav>
}

templ Breadcrumb(bc []BreadcrumbInfo) {
	@BreadcrumbWrapper() {
		for i, b := range bc {
			@BreadcrumbItem(b.Label, b.Href, b.Active, i == len(bc) - 1, false)
		}
	}
	if len(bc) > 1 {
		<nav aria-label="Breadcrumb" class="flex flex-grow-0 md:hidden overflow-x-clip">
			@HxLink("focusable action-button text-ellipsis text-xl bg-neutral-900/10 hover:bg-neutral-900/20 text-neutral-800", bc[len(bc)-2].Href, "#main-content") {
				<span class="-mx-2 size-8 icon-[iconamoon--arrow-left-2-thin]" aria-hidden="true"></span>
				{ bc[len(bc)-2].Label }
			}
		</nav>
	}
}

type BreadcrumbWithDatesInfo struct {
	Label  string
	Href   string
	Active bool
	IsDate bool
}

templ BreadcrumbWithDates(bc []BreadcrumbWithDatesInfo) {
	@BreadcrumbWrapper() {
		for i, b := range bc {
			@BreadcrumbItem(b.Label, b.Href, b.Active, i == len(bc) - 1, b.IsDate)
		}
	}
	if len(bc) > 1 {
		<nav aria-label="Breadcrumb" class="flex flex-grow-0 md:hidden overflow-x-clip">
			@HxLink("focusable action-button text-ellipsis text-xl bg-neutral-900/10 hover:bg-neutral-900/20 text-neutral-800", bc[len(bc)-2].Href, "#main-content") {
				<span class="-mx-2 icon-[iconamoon--arrow-left-2-thin] size-8" aria-hidden="true"></span>
				if bc[len(bc)-2].IsDate {
					<number-date epoch={ bc[len(bc)-2].Label }></number-date>
				} else {
					{ bc[len(bc)-2].Label }
				}
			}
		</nav>
	}
}

templ BreadcrumbItem(label string, href string, active bool, isLast bool, isDate bool) {
	<li
 		class={ "flex items-center max-w-[12rem]", templ.KV("text-neutral-900", active), templ.KV("text-neutral-900/50", !active) }
 		aria-current?={ active }
	>
		@HxLink("truncate focusable rounded-xl p-1", href, "#main-content") {
			if isDate {
				<number-date epoch={ label }></number-date>
			} else {
				{ label }
			}
		}
	</li>
	if !isLast {
		<span class="flex items-center -mx-2 h-full text-neutral-900/50" aria-hidden="true">
			<span class="size-6 icon-[iconamoon--arrow-right-2-thin] sm:size-8" aria-hidden="true"></span>
		</span>
	}
}

templ PieceCardHeading(title, composer string, completed bool) {
	<div class={ templ.KV("text-indigo-950", !completed), templ.KV("text-green-950", completed) }>
		<strong class="text-xl font-bold">{ title }</strong>
	</div>
	<div class={ templ.KV("text-indigo-800", !completed), templ.KV("text-green-800", completed), "whitespace-nowrap" }>
		if composer != "" {
			{ composer }
		} else {
			Unknown
		}
	</div>
}

const pieceCardClass = "flex py-4 px-6 text-black rounded-xl border shadow-sm transition-all duration-200 shadow-black/20 focusable"

func getPieceCardClass(completed bool) string {
	if completed {
		return pieceCardClass + " bg-green-300 border border-green-500"
	} else {
		return pieceCardClass + " border-neutral-300 bg-neutral-50 hover:shadow hover:shadow-indigo-400"
	}
}

templ PieceCard(pieceID string, title string, composer string, activeSpots int64, completedSpots int64) {
	<li>
		@HxLink(getPieceCardClass(false),
			"/library/pieces/"+pieceID,
			"#main-content",
		) {
			<div class="flex flex-col flex-1 flex-grow gap-1">
				@PieceCardHeading(title, composer, false)
				<div>Active Spots: { strconv.FormatInt(activeSpots, 10) }</div>
				<div>Finished Spots: { strconv.FormatInt(completedSpots, 10) }</div>
			</div>
			<div class="flex flex-grow-0 items-center text-indigo-900">
				<div class="sr-only">Click to view</div>
				<span class="-mr-2 size-12 icon-[custom--music-file]" aria-hidden="true"></span>
			</div>
		}
	</li>
}

func getSessionsFromIntensity(intensity string) string {
	switch intensity {
	case "light":
		return "1"
	case "medium":
		return "3"
	case "heavy":
		return "5"
	default:
		return "1"
	}
}

func GetPiecePracticeUrl(completed, isActive bool, pieceID, practiceType, intensity string) string {
	if completed || !isActive {
		return "/library/pieces/" + pieceID
	}
	switch practiceType {
	case "random_spots":
		return "/library/pieces/" + pieceID + "/practice/random?resume=true&skipSetup=true&numSessions=" + getSessionsFromIntensity(intensity)
	case "starting_point":
		return "/library/pieces/" + pieceID + "/practice/starting-point?resume=true&skipSetup=true&numSessions=" + getSessionsFromIntensity(intensity)

	default:
		return "/library/pieces/" + pieceID
	}
}

templ PracticePlanPieceCard(pieceID string, title string, composer string, activeSpots int64, completed bool, practiceType string, intensity string, isActive bool) {
	<li>
		@HxLink(getPieceCardClass(completed), GetPiecePracticeUrl(completed, isActive, pieceID, practiceType, intensity), "#main-content") {
			<div class="flex flex-col flex-1 flex-grow gap-1">
				@PieceCardHeading(title, composer, completed)
				if practiceType == "random_spots" {
					<div>Random Spots: { strconv.FormatInt(activeSpots, 10) }</div>
				}
				if completed {
					<div class="font-bold">Completed</div>
				} else {
					<div class="font-medium">Click to Practice</div>
				}
			</div>
			<div class="flex flex-grow-0 items-center">
				if completed {
					<span class="-mr-2 text-green-900 size-10 icon-[iconamoon--check-circle-1-duotone]" aria-hidden="true"></span>
					<span class="sr-only">Completed</span>
				} else if practiceType == "random_spots" {
					<span class="sr-only">Click to practice</span>
					<span class="-mr-2 size-10 icon-[iconamoon--playlist-shuffle-thin]" aria-hidden="true"></span>
				} else if practiceType == "starting_point" {
					<span class="sr-only">Click to practice</span>
					<span class="-mr-2 size-10 icon-[custom--random-boxes]" aria-hidden="true"></span>
				} else {
					<span class="sr-only">Click to view</span>
					<span class="-mr-2 size-12 icon-[custom--music-file]" aria-hidden="true"></span>
				}
			</div>
		}
	</li>
}

templ PracticeToolNav(activepath string) {
	<practice-tool-nav activepath={ activepath }></practice-tool-nav>
}

type PracticePlanCardInfo struct {
	ID             string
	Date           int64
	CompletedItems int64
	TotalItems     int64
	PieceTitles    []string
}

templ PracticePlanCard(planInfo PracticePlanCardInfo) {
	@HxLink("flex flex-col gap-2 p-4 text-black bg-white rounded-lg shadow-sm shadow-black/20 focusable hover:shadow hover:shadow-violet-400", "/library/plans/"+planInfo.ID, "#main-content") {
		<div class="flex flex-col gap-1 px-6 w-full">
			<h3 class="pb-1 text-xl font-bold text-center text-black">
				<pretty-date class="text-black" epoch={ strconv.FormatInt(planInfo.Date, 10) }></pretty-date>
				if planInfo.ID == GetActivePracticePlan(ctx) {
					<span class="text-violet-700">- Active</span>
				}
			</h3>
			<label id="progress-label" class="sr-only">Plan Progress</label>
			<progress
 				value={ strconv.FormatInt(planInfo.CompletedItems, 10) }
 				max={ strconv.FormatInt(planInfo.TotalItems, 10) }
 				class="m-0 w-full progress-rounded progress-violet-600 progress-bg-violet-200"
 				aria-labelledby="progress-label"
			>{ strconv.FormatInt(planInfo.CompletedItems, 10) }/{ strconv.FormatInt(planInfo.TotalItems, 10) }</progress>
		</div>
		<div class="flex flex-col">
			<h4 class="w-full font-bold text-black underline">
				Pieces
			</h4>
			<ul class="grid grid-cols-1 gap-1 font-medium list-none md:text-base xs:grid-cols-2 text-neutral-800">
				for _, pieceTitle := range planInfo.PieceTitles {
					<li>
						{ pieceTitle }
					</li>
				}
			</ul>
		</div>
	}
}
